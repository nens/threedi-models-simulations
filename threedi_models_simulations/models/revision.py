# coding: utf-8

"""
3Di API

3Di simulation API (latest stable version: v3)   Framework release: 3.4.71   3Di core release: 3.6.10  deployed on:  09:22AM (UTC) on September 01, 2025

The version of the OpenAPI document: v3
Contact: info@nelen-schuurmans.nl
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from datetime import datetime
from typing import Any, ClassVar, Dict, List, Optional, Set

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing_extensions import Annotated, Self


class Revision(BaseModel):
    """
    Revision
    """  # noqa: E501

    url: Optional[StrictStr] = None
    id: Optional[StrictInt] = None
    repository: StrictStr
    number: Optional[
        Annotated[int, Field(le=2147483647, strict=True, ge=-2147483648)]
    ] = None
    hash: Optional[Annotated[str, Field(strict=True, max_length=200)]] = Field(
        default=None, description="unique identifier for changeset"
    )
    commit_date: Optional[datetime] = None
    user: Optional[Annotated[str, Field(strict=True, max_length=128)]] = Field(
        default=None, description="user that committed the changeset for this revision"
    )
    is_pinned: Optional[StrictBool] = None
    __properties: ClassVar[List[str]] = [
        "url",
        "id",
        "repository",
        "number",
        "hash",
        "commit_date",
        "user",
        "is_pinned",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Revision from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set(
            [
                "url",
                "id",
            ]
        )

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if hash (nullable) is None
        # and model_fields_set contains the field
        if self.hash is None and "hash" in self.model_fields_set:
            _dict["hash"] = None

        # set to None if commit_date (nullable) is None
        # and model_fields_set contains the field
        if self.commit_date is None and "commit_date" in self.model_fields_set:
            _dict["commit_date"] = None

        # set to None if user (nullable) is None
        # and model_fields_set contains the field
        if self.user is None and "user" in self.model_fields_set:
            _dict["user"] = None

        # set to None if is_pinned (nullable) is None
        # and model_fields_set contains the field
        if self.is_pinned is None and "is_pinned" in self.model_fields_set:
            _dict["is_pinned"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Revision from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "url": obj.get("url"),
                "id": obj.get("id"),
                "repository": obj.get("repository"),
                "number": obj.get("number"),
                "hash": obj.get("hash"),
                "commit_date": obj.get("commit_date"),
                "user": obj.get("user"),
                "is_pinned": obj.get("is_pinned"),
            }
        )
        return _obj
