# coding: utf-8

"""
3Di API

3Di simulation API (latest stable version: v3)   Framework release: 3.4.71   3Di core release: 3.6.10  deployed on:  09:22AM (UTC) on September 01, 2025

The version of the OpenAPI document: v3
Contact: info@nelen-schuurmans.nl
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List, Optional, Set, Union

from pydantic import (
    BaseModel,
    ConfigDict,
    Field,
    StrictFloat,
    StrictInt,
    StrictStr,
    field_validator,
)
from typing_extensions import Annotated, Self

from ..models.extent1 import Extent1
from ..models.file_read_only import FileReadOnly


class RevisionRaster(BaseModel):
    """
    RevisionRaster
    """  # noqa: E501

    url: Optional[StrictStr] = None
    type: StrictStr
    name: Annotated[str, Field(min_length=1, strict=True, max_length=60)]
    file: Optional[FileReadOnly] = None
    id: Optional[StrictInt] = None
    epsg_code: Optional[StrictInt] = None
    extent: Optional[Extent1] = None
    geotransform: Optional[List[Union[StrictFloat, StrictInt]]] = None
    unit: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = [
        "url",
        "type",
        "name",
        "file",
        "id",
        "epsg_code",
        "extent",
        "geotransform",
        "unit",
    ]

    @field_validator("type")
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(
            [
                "dem_file",
                "equilibrium_infiltration_rate_file",
                "frict_coef_file",
                "initial_groundwater_level_file",
                "initial_waterlevel_file",
                "groundwater_hydro_connectivity_file",
                "groundwater_impervious_layer_level_file",
                "infiltration_decay_period_file",
                "initial_infiltration_rate_file",
                "leakage_file",
                "phreatic_storage_capacity_file",
                "hydraulic_conductivity_file",
                "porosity_file",
                "infiltration_rate_file",
                "max_infiltration_capacity_file",
                "interception_file",
                "vegetation_height_file",
                "vegetation_drag_coefficient_file",
                "vegetation_stem_count_file",
                "vegetation_stem_diameter_file",
                "initial_groundwater_concentration_file",
            ]
        ):
            raise ValueError(
                "must be one of enum values ('dem_file', 'equilibrium_infiltration_rate_file', 'frict_coef_file', 'initial_groundwater_level_file', 'initial_waterlevel_file', 'groundwater_hydro_connectivity_file', 'groundwater_impervious_layer_level_file', 'infiltration_decay_period_file', 'initial_infiltration_rate_file', 'leakage_file', 'phreatic_storage_capacity_file', 'hydraulic_conductivity_file', 'porosity_file', 'infiltration_rate_file', 'max_infiltration_capacity_file', 'interception_file', 'vegetation_height_file', 'vegetation_drag_coefficient_file', 'vegetation_stem_count_file', 'vegetation_stem_diameter_file', 'initial_groundwater_concentration_file')"
            )
        return value

    @field_validator("unit")
    def unit_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(["meters"]):
            raise ValueError("must be one of enum values ('meters')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RevisionRaster from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set(
            [
                "url",
                "id",
                "epsg_code",
                "geotransform",
            ]
        )

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of file
        if self.file:
            _dict["file"] = self.file.to_dict()
        # override the default output from pydantic by calling `to_dict()` of extent
        if self.extent:
            _dict["extent"] = self.extent.to_dict()
        # set to None if epsg_code (nullable) is None
        # and model_fields_set contains the field
        if self.epsg_code is None and "epsg_code" in self.model_fields_set:
            _dict["epsg_code"] = None

        # set to None if geotransform (nullable) is None
        # and model_fields_set contains the field
        if self.geotransform is None and "geotransform" in self.model_fields_set:
            _dict["geotransform"] = None

        # set to None if unit (nullable) is None
        # and model_fields_set contains the field
        if self.unit is None and "unit" in self.model_fields_set:
            _dict["unit"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RevisionRaster from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "url": obj.get("url"),
                "type": obj.get("type"),
                "name": obj.get("name"),
                "file": FileReadOnly.from_dict(obj["file"])
                if obj.get("file") is not None
                else None,
                "id": obj.get("id"),
                "epsg_code": obj.get("epsg_code"),
                "extent": Extent1.from_dict(obj["extent"])
                if obj.get("extent") is not None
                else None,
                "geotransform": obj.get("geotransform"),
                "unit": obj.get("unit"),
            }
        )
        return _obj
