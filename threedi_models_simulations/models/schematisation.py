# coding: utf-8

"""
3Di API

3Di simulation API (latest stable version: v3)   Framework release: 3.4.71   3Di core release: 3.6.10  deployed on:  09:22AM (UTC) on September 01, 2025

The version of the OpenAPI document: v3
Contact: info@nelen-schuurmans.nl
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from datetime import datetime
from typing import Any, ClassVar, Dict, List, Optional, Set

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing_extensions import Annotated, Self


class Schematisation(BaseModel):
    """
    Schematisation
    """  # noqa: E501

    url: Optional[StrictStr] = None
    id: Optional[StrictInt] = None
    owner: Optional[StrictStr] = Field(
        default=None, description="The unique_id of an organisation"
    )
    name: Annotated[str, Field(min_length=1, strict=True, max_length=256)]
    slug: Optional[Annotated[str, Field(min_length=1, strict=True, max_length=256)]] = (
        Field(
            default=None, description="The internal name (only superusers can modify)"
        )
    )
    tags: Optional[List[StrictStr]] = Field(
        default=None, description="tags provided as a list of strings"
    )
    meta: Optional[Dict[str, Any]] = None
    created_by: Optional[Annotated[str, Field(strict=True)]] = Field(
        default=None, description="The username of a user"
    )
    created_by_first_name: Optional[StrictStr] = None
    created_by_last_name: Optional[StrictStr] = None
    created: Optional[datetime] = Field(
        default=None,
        description="The creation date and time (only superusers can modify)",
    )
    archived: Optional[datetime] = None
    last_updated: Optional[datetime] = None
    storage_usage: Optional[StrictInt] = Field(
        default=None, description="Automatically calculated."
    )
    threedimodel_limit: Optional[Annotated[int, Field(le=32767, strict=True, ge=0)]] = (
        Field(
            default=None,
            description="Maximum amount of ThreediModels per Schematisation",
        )
    )
    __properties: ClassVar[List[str]] = [
        "url",
        "id",
        "owner",
        "name",
        "slug",
        "tags",
        "meta",
        "created_by",
        "created_by_first_name",
        "created_by_last_name",
        "created",
        "archived",
        "last_updated",
        "storage_usage",
        "threedimodel_limit",
    ]

    @field_validator("slug")
    def slug_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^[-a-zA-Z0-9_]+$", value):
            raise ValueError(r"must validate the regular expression /^[-a-zA-Z0-9_]+$/")
        return value

    @field_validator("created_by")
    def created_by_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^[\w.@+-]+$", value):
            raise ValueError(r"must validate the regular expression /^[\w.@+-]+$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Schematisation from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set(
            [
                "url",
                "id",
                "created_by_first_name",
                "created_by_last_name",
                "archived",
                "last_updated",
                "storage_usage",
            ]
        )

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if meta (nullable) is None
        # and model_fields_set contains the field
        if self.meta is None and "meta" in self.model_fields_set:
            _dict["meta"] = None

        # set to None if archived (nullable) is None
        # and model_fields_set contains the field
        if self.archived is None and "archived" in self.model_fields_set:
            _dict["archived"] = None

        # set to None if last_updated (nullable) is None
        # and model_fields_set contains the field
        if self.last_updated is None and "last_updated" in self.model_fields_set:
            _dict["last_updated"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Schematisation from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "url": obj.get("url"),
                "id": obj.get("id"),
                "owner": obj.get("owner"),
                "name": obj.get("name"),
                "slug": obj.get("slug"),
                "tags": obj.get("tags"),
                "meta": obj.get("meta"),
                "created_by": obj.get("created_by"),
                "created_by_first_name": obj.get("created_by_first_name"),
                "created_by_last_name": obj.get("created_by_last_name"),
                "created": obj.get("created"),
                "archived": obj.get("archived"),
                "last_updated": obj.get("last_updated"),
                "storage_usage": obj.get("storage_usage"),
                "threedimodel_limit": obj.get("threedimodel_limit"),
            }
        )
        return _obj
