# coding: utf-8

"""
3Di API

3Di simulation API (latest stable version: v3)   Framework release: 3.4.71   3Di core release: 3.6.10  deployed on:  09:22AM (UTC) on September 01, 2025

The version of the OpenAPI document: v3
Contact: info@nelen-schuurmans.nl
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List, Optional, Set

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing_extensions import Annotated, Self


class UploadEventFile(BaseModel):
    """
    UploadEventFile
    """  # noqa: E501

    put_url: Optional[Annotated[str, Field(min_length=1, strict=True)]] = None
    filename: Annotated[str, Field(min_length=1, strict=True, max_length=255)]
    status: Optional[Annotated[str, Field(min_length=1, strict=True)]] = None
    offset: Annotated[int, Field(strict=True, ge=0)]
    periodic: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = [
        "put_url",
        "filename",
        "status",
        "offset",
        "periodic",
    ]

    @field_validator("periodic")
    def periodic_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(["daily"]):
            raise ValueError("must be one of enum values ('daily')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UploadEventFile from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set(
            [
                "put_url",
                "status",
            ]
        )

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UploadEventFile from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "put_url": obj.get("put_url"),
                "filename": obj.get("filename"),
                "status": obj.get("status"),
                "offset": obj.get("offset"),
                "periodic": obj.get("periodic"),
            }
        )
        return _obj
