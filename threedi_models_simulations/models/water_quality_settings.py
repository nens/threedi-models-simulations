# coding: utf-8

"""
3Di API

3Di simulation API (latest stable version: v3)   Framework release: 3.4.71   3Di core release: 3.6.10  deployed on:  09:22AM (UTC) on September 01, 2025

The version of the OpenAPI document: v3
Contact: info@nelen-schuurmans.nl
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List, Optional, Set, Union

from pydantic import BaseModel, ConfigDict, Field, StrictInt
from typing_extensions import Annotated, Self


class WaterQualitySettings(BaseModel):
    """
    WaterQualitySettings
    """  # noqa: E501

    id: Optional[StrictInt] = None
    simulation_id: Optional[StrictInt] = None
    time_step: Optional[
        Union[
            Annotated[float, Field(strict=True, ge=1e-14)],
            Annotated[int, Field(strict=True, ge=1)],
        ]
    ] = Field(
        default=None, description="Size of the water quality timestep in seconds."
    )
    min_time_step: Optional[
        Union[
            Annotated[float, Field(strict=True, ge=1e-14)],
            Annotated[int, Field(strict=True, ge=1)],
        ]
    ] = Field(
        default=None,
        description="Minimum size of the water quality timestep in seconds. Suitable default is 0.001. Cannot be greater than hydrodynamic minimum timestep.",
    )
    max_time_step: Optional[
        Union[
            Annotated[float, Field(strict=True, ge=1e-14)],
            Annotated[int, Field(strict=True, ge=1)],
        ]
    ] = Field(
        default=None,
        description="Maximum size of the water quality timestep in seconds. Cannot be greater than hydrodynamic maximum timestep.",
    )
    general_numerical_threshold: Optional[
        Union[
            Annotated[float, Field(strict=True, ge=1e-14)],
            Annotated[int, Field(strict=True, ge=1)],
        ]
    ] = Field(
        default=None,
        description="The numerical threshold for the water quality simulation.",
    )
    max_number_of_multi_step: Optional[
        Annotated[int, Field(le=2147483647, strict=True, ge=0)]
    ] = Field(
        default=None,
        description="The maximum number of steps used by the multi-step method.",
    )
    max_gs_sweep_iterations: Optional[
        Annotated[int, Field(le=2147483647, strict=True, ge=0)]
    ] = Field(
        default=None,
        description="The maximum number of iterations used by the Gauss-Seidel sweep method.",
    )
    convergence_eps: Optional[
        Union[
            Annotated[float, Field(strict=True, ge=1e-14)],
            Annotated[int, Field(strict=True, ge=1)],
        ]
    ] = Field(
        default=None,
        description="The convergence epsilon for the water quality simulation.",
    )
    __properties: ClassVar[List[str]] = [
        "id",
        "simulation_id",
        "time_step",
        "min_time_step",
        "max_time_step",
        "general_numerical_threshold",
        "max_number_of_multi_step",
        "max_gs_sweep_iterations",
        "convergence_eps",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of WaterQualitySettings from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set(
            [
                "id",
                "simulation_id",
            ]
        )

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if min_time_step (nullable) is None
        # and model_fields_set contains the field
        if self.min_time_step is None and "min_time_step" in self.model_fields_set:
            _dict["min_time_step"] = None

        # set to None if max_time_step (nullable) is None
        # and model_fields_set contains the field
        if self.max_time_step is None and "max_time_step" in self.model_fields_set:
            _dict["max_time_step"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of WaterQualitySettings from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "id": obj.get("id"),
                "simulation_id": obj.get("simulation_id"),
                "time_step": obj.get("time_step"),
                "min_time_step": obj.get("min_time_step"),
                "max_time_step": obj.get("max_time_step"),
                "general_numerical_threshold": obj.get("general_numerical_threshold"),
                "max_number_of_multi_step": obj.get("max_number_of_multi_step"),
                "max_gs_sweep_iterations": obj.get("max_gs_sweep_iterations"),
                "convergence_eps": obj.get("convergence_eps"),
            }
        )
        return _obj
