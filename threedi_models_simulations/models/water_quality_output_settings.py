# coding: utf-8

"""
3Di API

3Di simulation API (latest stable version: v3)   Framework release: 3.4.71   3Di core release: 3.6.10  deployed on:  09:22AM (UTC) on September 01, 2025

The version of the OpenAPI document: v3
Contact: info@nelen-schuurmans.nl
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List, Optional, Set, Union

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt
from typing_extensions import Annotated, Self


class WaterQualityOutputSettings(BaseModel):
    """
    WaterQualityOutputSettings
    """  # noqa: E501

    id: Optional[StrictInt] = None
    simulation_id: Optional[StrictInt] = None
    create_results: Optional[StrictBool] = Field(
        default=None, description="Create domain wide results file."
    )
    output_time_step: Optional[
        Union[
            Annotated[float, Field(strict=True, ge=1e-14)],
            Annotated[int, Field(strict=True, ge=1)],
        ]
    ] = Field(default=None, description="Output time step in seconds.")
    output_start_time: Optional[
        Union[
            Annotated[float, Field(strict=True, ge=0)],
            Annotated[int, Field(strict=True, ge=0)],
        ]
    ] = Field(default=None, description="Output start time in seconds.")
    output_end_time: Optional[
        Union[
            Annotated[float, Field(strict=True, ge=1e-14)],
            Annotated[int, Field(strict=True, ge=1)],
        ]
    ] = Field(default=None, description="Output end time in seconds.")
    output_precision: Optional[StrictInt] = Field(
        default=None, description="Single or double precision output."
    )
    customized_output_time_step: Optional[
        Union[
            Annotated[float, Field(strict=True, ge=1e-14)],
            Annotated[int, Field(strict=True, ge=1)],
        ]
    ] = Field(default=None, description="Customized output time step in seconds.")
    customized_output_start_time: Optional[
        Union[
            Annotated[float, Field(strict=True, ge=0)],
            Annotated[int, Field(strict=True, ge=0)],
        ]
    ] = Field(default=None, description="Customized output start time in seconds.")
    customized_output_end_time: Optional[
        Union[
            Annotated[float, Field(strict=True, ge=1e-14)],
            Annotated[int, Field(strict=True, ge=1)],
        ]
    ] = Field(default=None, description="Customized output end time in seconds.")
    customized_output_precision: Optional[StrictInt] = Field(
        default=None,
        description="Single or double precision output for customized results.",
    )
    __properties: ClassVar[List[str]] = [
        "id",
        "simulation_id",
        "create_results",
        "output_time_step",
        "output_start_time",
        "output_end_time",
        "output_precision",
        "customized_output_time_step",
        "customized_output_start_time",
        "customized_output_end_time",
        "customized_output_precision",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of WaterQualityOutputSettings from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set(
            [
                "id",
                "simulation_id",
            ]
        )

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if output_time_step (nullable) is None
        # and model_fields_set contains the field
        if (
            self.output_time_step is None
            and "output_time_step" in self.model_fields_set
        ):
            _dict["output_time_step"] = None

        # set to None if customized_output_time_step (nullable) is None
        # and model_fields_set contains the field
        if (
            self.customized_output_time_step is None
            and "customized_output_time_step" in self.model_fields_set
        ):
            _dict["customized_output_time_step"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of WaterQualityOutputSettings from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "id": obj.get("id"),
                "simulation_id": obj.get("simulation_id"),
                "create_results": obj.get("create_results"),
                "output_time_step": obj.get("output_time_step"),
                "output_start_time": obj.get("output_start_time"),
                "output_end_time": obj.get("output_end_time"),
                "output_precision": obj.get("output_precision"),
                "customized_output_time_step": obj.get("customized_output_time_step"),
                "customized_output_start_time": obj.get("customized_output_start_time"),
                "customized_output_end_time": obj.get("customized_output_end_time"),
                "customized_output_precision": obj.get("customized_output_precision"),
            }
        )
        return _obj
