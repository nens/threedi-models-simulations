# coding: utf-8

"""
3Di API

3Di simulation API (latest stable version: v3)   Framework release: 3.4.71   3Di core release: 3.6.10  deployed on:  09:22AM (UTC) on September 01, 2025

The version of the OpenAPI document: v3
Contact: info@nelen-schuurmans.nl
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List, Optional, Set, Union
from uuid import UUID

from pydantic import (
    BaseModel,
    ConfigDict,
    Field,
    StrictBool,
    StrictFloat,
    StrictInt,
    StrictStr,
    field_validator,
)
from typing_extensions import Annotated, Self


class ConstantWind(BaseModel):
    """
    ConstantWind
    """  # noqa: E501

    id: Optional[StrictInt] = None
    uid: Optional[UUID] = None
    url: Optional[StrictStr] = None
    simulation: Optional[StrictStr] = None
    offset: Annotated[int, Field(le=2147483647, strict=True, ge=0)] = Field(
        description="offset of event in simulation in seconds"
    )
    duration: Optional[
        Annotated[
            int, Field(le=9223372036854775807, strict=True, ge=-9223372036854775808)
        ]
    ] = Field(
        default=None,
        description="event duration in seconds. -9999 is the 'infinite duration' value (only allowed in conjunction with infinite simulations",
    )
    values: Optional[List[List[Union[StrictFloat, StrictInt]]]] = Field(
        default=None, description="[time, speed, direction]"
    )
    units: Optional[StrictStr] = Field(
        default=None, description="wind speed unit (default 'm/s')"
    )
    speed_interpolate: Optional[StrictBool] = Field(
        default=None, description="interpolate wind speed"
    )
    speed_constant: Optional[StrictBool] = Field(
        default=None, description="constant wind speed"
    )
    direction_interpolate: Optional[StrictBool] = Field(
        default=None, description="interpolate wind direction"
    )
    direction_constant: Optional[StrictBool] = Field(
        default=None, description="constant wind direction"
    )
    speed_value: Optional[
        Union[
            Annotated[float, Field(strict=True, ge=0)],
            Annotated[int, Field(strict=True, ge=0)],
        ]
    ] = Field(default=None, description="constant wind speed")
    direction_value: Optional[Annotated[int, Field(le=360, strict=True, ge=0)]] = Field(
        default=None,
        description="constant wind direction in degrees (0-360) from north - meteorological standard (thus, 180 is a southern wind)",
    )
    __properties: ClassVar[List[str]] = [
        "id",
        "uid",
        "url",
        "simulation",
        "offset",
        "duration",
        "values",
        "units",
        "speed_interpolate",
        "speed_constant",
        "direction_interpolate",
        "direction_constant",
        "speed_value",
        "direction_value",
    ]

    @field_validator("units")
    def units_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(["m/s", "km/h"]):
            raise ValueError("must be one of enum values ('m/s', 'km/h')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ConstantWind from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set(
            [
                "id",
                "uid",
                "url",
                "simulation",
                "values",
                "speed_interpolate",
                "speed_constant",
                "direction_interpolate",
                "direction_constant",
            ]
        )

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if duration (nullable) is None
        # and model_fields_set contains the field
        if self.duration is None and "duration" in self.model_fields_set:
            _dict["duration"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ConstantWind from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "id": obj.get("id"),
                "uid": obj.get("uid"),
                "url": obj.get("url"),
                "simulation": obj.get("simulation"),
                "offset": obj.get("offset"),
                "duration": obj.get("duration"),
                "values": obj.get("values"),
                "units": obj.get("units"),
                "speed_interpolate": obj.get("speed_interpolate"),
                "speed_constant": obj.get("speed_constant"),
                "direction_interpolate": obj.get("direction_interpolate"),
                "direction_constant": obj.get("direction_constant"),
                "speed_value": obj.get("speed_value"),
                "direction_value": obj.get("direction_value"),
            }
        )
        return _obj
