# coding: utf-8

"""
3Di API

3Di simulation API (latest stable version: v3)   Framework release: 3.4.71   3Di core release: 3.6.10  deployed on:  09:22AM (UTC) on September 01, 2025

The version of the OpenAPI document: v3
Contact: info@nelen-schuurmans.nl
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List, Optional, Set

from pydantic import BaseModel, ConfigDict
from typing_extensions import Self

from ..models.breach import Breach
from ..models.file_boundary_condition import FileBoundaryCondition
from ..models.file_lateral import FileLateral
from ..models.file_raster_leakage import FileRasterLeakage
from ..models.file_raster_rain import FileRasterRain
from ..models.file_raster_sources_sinks import FileRasterSourcesSinks
from ..models.file_structure_control import FileStructureControl
from ..models.file_timeseries_leakage import FileTimeseriesLeakage
from ..models.file_timeseries_rain import FileTimeseriesRain
from ..models.file_timeseries_sources_sinks import FileTimeseriesSourcesSinks
from ..models.ground_water_level import GroundWaterLevel
from ..models.ground_water_raster import GroundWaterRaster
from ..models.ground_water_substance_concentration import (
    GroundWaterSubstanceConcentration,
)
from ..models.initial_saved_state_overview import InitialSavedStateOverview
from ..models.lateral import Lateral
from ..models.lizard_raster_rain import LizardRasterRain
from ..models.lizard_raster_sources_sinks import LizardRasterSourcesSinks
from ..models.lizard_timeseries_rain import LizardTimeseriesRain
from ..models.lizard_timeseries_sources_sinks import LizardTimeseriesSourcesSinks
from ..models.local_rain import LocalRain
from ..models.memory_structure_control import MemoryStructureControl
from ..models.obstacle_edit import ObstacleEdit
from ..models.one_d_substance_concentration import OneDSubstanceConcentration
from ..models.one_d_water_level import OneDWaterLevel
from ..models.one_d_water_level_file import OneDWaterLevelFile
from ..models.one_d_water_level_predefined import OneDWaterLevelPredefined
from ..models.raster_edit import RasterEdit
from ..models.saved_state_overview import SavedStateOverview
from ..models.substance import Substance
from ..models.table_structure_control import TableStructureControl
from ..models.timed_structure_control import TimedStructureControl
from ..models.timeseries_leakage_overview import TimeseriesLeakageOverview
from ..models.timeseries_rain_overview import TimeseriesRainOverview
from ..models.timeseries_sources_sinks_overview import TimeseriesSourcesSinksOverview
from ..models.two_d_substance_concentration import TwoDSubstanceConcentration
from ..models.two_d_water_level import TwoDWaterLevel
from ..models.two_d_water_raster import TwoDWaterRaster
from ..models.wind import Wind
from ..models.wind_drag_coefficient import WindDragCoefficient


class Event(BaseModel):
    """
    Event
    """  # noqa: E501

    substances: Optional[List[Substance]] = None
    lizardrasterrain: Optional[List[LizardRasterRain]] = None
    lizardtimeseriesrain: Optional[List[LizardTimeseriesRain]] = None
    timeseriesrain: Optional[List[TimeseriesRainOverview]] = None
    breach: Optional[List[Breach]] = None
    lizardrastersourcessinks: Optional[List[LizardRasterSourcesSinks]] = None
    lizardtimeseriessourcessinks: Optional[List[LizardTimeseriesSourcesSinks]] = None
    filerastersourcessinks: Optional[List[FileRasterSourcesSinks]] = None
    filetimeseriessourcessinks: Optional[List[FileTimeseriesSourcesSinks]] = None
    timeseriessourcessinks: Optional[List[TimeseriesSourcesSinksOverview]] = None
    leakage: Optional[List[TimeseriesLeakageOverview]] = None
    filetimeseriesleakage: Optional[List[FileTimeseriesLeakage]] = None
    filerasterleakage: Optional[List[FileRasterLeakage]] = None
    initial_twodwaterlevel: Optional[TwoDWaterLevel] = None
    initial_onedwaterlevelpredefined: Optional[OneDWaterLevelPredefined] = None
    initial_groundwaterlevel: Optional[GroundWaterLevel] = None
    initial_groundwaterraster: Optional[GroundWaterRaster] = None
    initial_onedwaterlevel: Optional[OneDWaterLevel] = None
    initial_onedwaterlevelfile: Optional[OneDWaterLevelFile] = None
    initial_twodwaterraster: Optional[TwoDWaterRaster] = None
    initial_oned_substance_concentrations: Optional[
        List[OneDSubstanceConcentration]
    ] = None
    initial_twod_substance_concentrations: Optional[
        List[TwoDSubstanceConcentration]
    ] = None
    initial_groundwater_substance_concentrations: Optional[
        List[GroundWaterSubstanceConcentration]
    ] = None
    filerasterrain: Optional[List[FileRasterRain]] = None
    filetimeseriesrain: Optional[List[FileTimeseriesRain]] = None
    initial_savedstate: Optional[InitialSavedStateOverview] = None
    savedstates: Optional[List[SavedStateOverview]] = None
    laterals: Optional[List[Lateral]] = None
    filelaterals: Optional[List[FileLateral]] = None
    fileboundaryconditions: Optional[FileBoundaryCondition] = None
    tablestructurecontrols: Optional[List[TableStructureControl]] = None
    memorystructurecontrols: Optional[List[MemoryStructureControl]] = None
    timedstructurecontrols: Optional[List[TimedStructureControl]] = None
    filestructurecontrols: Optional[List[FileStructureControl]] = None
    rasteredits: Optional[List[RasterEdit]] = None
    obstacleedits: Optional[List[ObstacleEdit]] = None
    localrain: Optional[List[LocalRain]] = None
    wind: Optional[List[Wind]] = None
    initial_winddragcoefficient: Optional[WindDragCoefficient] = None
    __properties: ClassVar[List[str]] = [
        "substances",
        "lizardrasterrain",
        "lizardtimeseriesrain",
        "timeseriesrain",
        "breach",
        "lizardrastersourcessinks",
        "lizardtimeseriessourcessinks",
        "filerastersourcessinks",
        "filetimeseriessourcessinks",
        "timeseriessourcessinks",
        "leakage",
        "filetimeseriesleakage",
        "filerasterleakage",
        "initial_twodwaterlevel",
        "initial_onedwaterlevelpredefined",
        "initial_groundwaterlevel",
        "initial_groundwaterraster",
        "initial_onedwaterlevel",
        "initial_onedwaterlevelfile",
        "initial_twodwaterraster",
        "initial_oned_substance_concentrations",
        "initial_twod_substance_concentrations",
        "initial_groundwater_substance_concentrations",
        "filerasterrain",
        "filetimeseriesrain",
        "initial_savedstate",
        "savedstates",
        "laterals",
        "filelaterals",
        "fileboundaryconditions",
        "tablestructurecontrols",
        "memorystructurecontrols",
        "timedstructurecontrols",
        "filestructurecontrols",
        "rasteredits",
        "obstacleedits",
        "localrain",
        "wind",
        "initial_winddragcoefficient",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Event from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set(
            [
                "substances",
                "lizardrasterrain",
                "lizardtimeseriesrain",
                "timeseriesrain",
                "breach",
                "lizardrastersourcessinks",
                "lizardtimeseriessourcessinks",
                "filerastersourcessinks",
                "filetimeseriessourcessinks",
                "timeseriessourcessinks",
                "leakage",
                "filetimeseriesleakage",
                "filerasterleakage",
                "initial_oned_substance_concentrations",
                "initial_twod_substance_concentrations",
                "initial_groundwater_substance_concentrations",
                "filerasterrain",
                "filetimeseriesrain",
                "savedstates",
                "laterals",
                "filelaterals",
                "tablestructurecontrols",
                "memorystructurecontrols",
                "timedstructurecontrols",
                "filestructurecontrols",
                "rasteredits",
                "obstacleedits",
                "localrain",
                "wind",
            ]
        )

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in substances (list)
        _items = []
        if self.substances:
            for _item_substances in self.substances:
                if _item_substances:
                    _items.append(_item_substances.to_dict())
            _dict["substances"] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in lizardrasterrain (list)
        _items = []
        if self.lizardrasterrain:
            for _item_lizardrasterrain in self.lizardrasterrain:
                if _item_lizardrasterrain:
                    _items.append(_item_lizardrasterrain.to_dict())
            _dict["lizardrasterrain"] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in lizardtimeseriesrain (list)
        _items = []
        if self.lizardtimeseriesrain:
            for _item_lizardtimeseriesrain in self.lizardtimeseriesrain:
                if _item_lizardtimeseriesrain:
                    _items.append(_item_lizardtimeseriesrain.to_dict())
            _dict["lizardtimeseriesrain"] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in timeseriesrain (list)
        _items = []
        if self.timeseriesrain:
            for _item_timeseriesrain in self.timeseriesrain:
                if _item_timeseriesrain:
                    _items.append(_item_timeseriesrain.to_dict())
            _dict["timeseriesrain"] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in breach (list)
        _items = []
        if self.breach:
            for _item_breach in self.breach:
                if _item_breach:
                    _items.append(_item_breach.to_dict())
            _dict["breach"] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in lizardrastersourcessinks (list)
        _items = []
        if self.lizardrastersourcessinks:
            for _item_lizardrastersourcessinks in self.lizardrastersourcessinks:
                if _item_lizardrastersourcessinks:
                    _items.append(_item_lizardrastersourcessinks.to_dict())
            _dict["lizardrastersourcessinks"] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in lizardtimeseriessourcessinks (list)
        _items = []
        if self.lizardtimeseriessourcessinks:
            for _item_lizardtimeseriessourcessinks in self.lizardtimeseriessourcessinks:
                if _item_lizardtimeseriessourcessinks:
                    _items.append(_item_lizardtimeseriessourcessinks.to_dict())
            _dict["lizardtimeseriessourcessinks"] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in filerastersourcessinks (list)
        _items = []
        if self.filerastersourcessinks:
            for _item_filerastersourcessinks in self.filerastersourcessinks:
                if _item_filerastersourcessinks:
                    _items.append(_item_filerastersourcessinks.to_dict())
            _dict["filerastersourcessinks"] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in filetimeseriessourcessinks (list)
        _items = []
        if self.filetimeseriessourcessinks:
            for _item_filetimeseriessourcessinks in self.filetimeseriessourcessinks:
                if _item_filetimeseriessourcessinks:
                    _items.append(_item_filetimeseriessourcessinks.to_dict())
            _dict["filetimeseriessourcessinks"] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in timeseriessourcessinks (list)
        _items = []
        if self.timeseriessourcessinks:
            for _item_timeseriessourcessinks in self.timeseriessourcessinks:
                if _item_timeseriessourcessinks:
                    _items.append(_item_timeseriessourcessinks.to_dict())
            _dict["timeseriessourcessinks"] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in leakage (list)
        _items = []
        if self.leakage:
            for _item_leakage in self.leakage:
                if _item_leakage:
                    _items.append(_item_leakage.to_dict())
            _dict["leakage"] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in filetimeseriesleakage (list)
        _items = []
        if self.filetimeseriesleakage:
            for _item_filetimeseriesleakage in self.filetimeseriesleakage:
                if _item_filetimeseriesleakage:
                    _items.append(_item_filetimeseriesleakage.to_dict())
            _dict["filetimeseriesleakage"] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in filerasterleakage (list)
        _items = []
        if self.filerasterleakage:
            for _item_filerasterleakage in self.filerasterleakage:
                if _item_filerasterleakage:
                    _items.append(_item_filerasterleakage.to_dict())
            _dict["filerasterleakage"] = _items
        # override the default output from pydantic by calling `to_dict()` of initial_twodwaterlevel
        if self.initial_twodwaterlevel:
            _dict["initial_twodwaterlevel"] = self.initial_twodwaterlevel.to_dict()
        # override the default output from pydantic by calling `to_dict()` of initial_onedwaterlevelpredefined
        if self.initial_onedwaterlevelpredefined:
            _dict["initial_onedwaterlevelpredefined"] = (
                self.initial_onedwaterlevelpredefined.to_dict()
            )
        # override the default output from pydantic by calling `to_dict()` of initial_groundwaterlevel
        if self.initial_groundwaterlevel:
            _dict["initial_groundwaterlevel"] = self.initial_groundwaterlevel.to_dict()
        # override the default output from pydantic by calling `to_dict()` of initial_groundwaterraster
        if self.initial_groundwaterraster:
            _dict["initial_groundwaterraster"] = (
                self.initial_groundwaterraster.to_dict()
            )
        # override the default output from pydantic by calling `to_dict()` of initial_onedwaterlevel
        if self.initial_onedwaterlevel:
            _dict["initial_onedwaterlevel"] = self.initial_onedwaterlevel.to_dict()
        # override the default output from pydantic by calling `to_dict()` of initial_onedwaterlevelfile
        if self.initial_onedwaterlevelfile:
            _dict["initial_onedwaterlevelfile"] = (
                self.initial_onedwaterlevelfile.to_dict()
            )
        # override the default output from pydantic by calling `to_dict()` of initial_twodwaterraster
        if self.initial_twodwaterraster:
            _dict["initial_twodwaterraster"] = self.initial_twodwaterraster.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in initial_oned_substance_concentrations (list)
        _items = []
        if self.initial_oned_substance_concentrations:
            for (
                _item_initial_oned_substance_concentrations
            ) in self.initial_oned_substance_concentrations:
                if _item_initial_oned_substance_concentrations:
                    _items.append(_item_initial_oned_substance_concentrations.to_dict())
            _dict["initial_oned_substance_concentrations"] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in initial_twod_substance_concentrations (list)
        _items = []
        if self.initial_twod_substance_concentrations:
            for (
                _item_initial_twod_substance_concentrations
            ) in self.initial_twod_substance_concentrations:
                if _item_initial_twod_substance_concentrations:
                    _items.append(_item_initial_twod_substance_concentrations.to_dict())
            _dict["initial_twod_substance_concentrations"] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in initial_groundwater_substance_concentrations (list)
        _items = []
        if self.initial_groundwater_substance_concentrations:
            for (
                _item_initial_groundwater_substance_concentrations
            ) in self.initial_groundwater_substance_concentrations:
                if _item_initial_groundwater_substance_concentrations:
                    _items.append(
                        _item_initial_groundwater_substance_concentrations.to_dict()
                    )
            _dict["initial_groundwater_substance_concentrations"] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in filerasterrain (list)
        _items = []
        if self.filerasterrain:
            for _item_filerasterrain in self.filerasterrain:
                if _item_filerasterrain:
                    _items.append(_item_filerasterrain.to_dict())
            _dict["filerasterrain"] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in filetimeseriesrain (list)
        _items = []
        if self.filetimeseriesrain:
            for _item_filetimeseriesrain in self.filetimeseriesrain:
                if _item_filetimeseriesrain:
                    _items.append(_item_filetimeseriesrain.to_dict())
            _dict["filetimeseriesrain"] = _items
        # override the default output from pydantic by calling `to_dict()` of initial_savedstate
        if self.initial_savedstate:
            _dict["initial_savedstate"] = self.initial_savedstate.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in savedstates (list)
        _items = []
        if self.savedstates:
            for _item_savedstates in self.savedstates:
                if _item_savedstates:
                    _items.append(_item_savedstates.to_dict())
            _dict["savedstates"] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in laterals (list)
        _items = []
        if self.laterals:
            for _item_laterals in self.laterals:
                if _item_laterals:
                    _items.append(_item_laterals.to_dict())
            _dict["laterals"] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in filelaterals (list)
        _items = []
        if self.filelaterals:
            for _item_filelaterals in self.filelaterals:
                if _item_filelaterals:
                    _items.append(_item_filelaterals.to_dict())
            _dict["filelaterals"] = _items
        # override the default output from pydantic by calling `to_dict()` of fileboundaryconditions
        if self.fileboundaryconditions:
            _dict["fileboundaryconditions"] = self.fileboundaryconditions.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in tablestructurecontrols (list)
        _items = []
        if self.tablestructurecontrols:
            for _item_tablestructurecontrols in self.tablestructurecontrols:
                if _item_tablestructurecontrols:
                    _items.append(_item_tablestructurecontrols.to_dict())
            _dict["tablestructurecontrols"] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in memorystructurecontrols (list)
        _items = []
        if self.memorystructurecontrols:
            for _item_memorystructurecontrols in self.memorystructurecontrols:
                if _item_memorystructurecontrols:
                    _items.append(_item_memorystructurecontrols.to_dict())
            _dict["memorystructurecontrols"] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in timedstructurecontrols (list)
        _items = []
        if self.timedstructurecontrols:
            for _item_timedstructurecontrols in self.timedstructurecontrols:
                if _item_timedstructurecontrols:
                    _items.append(_item_timedstructurecontrols.to_dict())
            _dict["timedstructurecontrols"] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in filestructurecontrols (list)
        _items = []
        if self.filestructurecontrols:
            for _item_filestructurecontrols in self.filestructurecontrols:
                if _item_filestructurecontrols:
                    _items.append(_item_filestructurecontrols.to_dict())
            _dict["filestructurecontrols"] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in rasteredits (list)
        _items = []
        if self.rasteredits:
            for _item_rasteredits in self.rasteredits:
                if _item_rasteredits:
                    _items.append(_item_rasteredits.to_dict())
            _dict["rasteredits"] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in obstacleedits (list)
        _items = []
        if self.obstacleedits:
            for _item_obstacleedits in self.obstacleedits:
                if _item_obstacleedits:
                    _items.append(_item_obstacleedits.to_dict())
            _dict["obstacleedits"] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in localrain (list)
        _items = []
        if self.localrain:
            for _item_localrain in self.localrain:
                if _item_localrain:
                    _items.append(_item_localrain.to_dict())
            _dict["localrain"] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in wind (list)
        _items = []
        if self.wind:
            for _item_wind in self.wind:
                if _item_wind:
                    _items.append(_item_wind.to_dict())
            _dict["wind"] = _items
        # override the default output from pydantic by calling `to_dict()` of initial_winddragcoefficient
        if self.initial_winddragcoefficient:
            _dict["initial_winddragcoefficient"] = (
                self.initial_winddragcoefficient.to_dict()
            )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Event from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "substances": [
                    Substance.from_dict(_item) for _item in obj["substances"]
                ]
                if obj.get("substances") is not None
                else None,
                "lizardrasterrain": [
                    LizardRasterRain.from_dict(_item)
                    for _item in obj["lizardrasterrain"]
                ]
                if obj.get("lizardrasterrain") is not None
                else None,
                "lizardtimeseriesrain": [
                    LizardTimeseriesRain.from_dict(_item)
                    for _item in obj["lizardtimeseriesrain"]
                ]
                if obj.get("lizardtimeseriesrain") is not None
                else None,
                "timeseriesrain": [
                    TimeseriesRainOverview.from_dict(_item)
                    for _item in obj["timeseriesrain"]
                ]
                if obj.get("timeseriesrain") is not None
                else None,
                "breach": [Breach.from_dict(_item) for _item in obj["breach"]]
                if obj.get("breach") is not None
                else None,
                "lizardrastersourcessinks": [
                    LizardRasterSourcesSinks.from_dict(_item)
                    for _item in obj["lizardrastersourcessinks"]
                ]
                if obj.get("lizardrastersourcessinks") is not None
                else None,
                "lizardtimeseriessourcessinks": [
                    LizardTimeseriesSourcesSinks.from_dict(_item)
                    for _item in obj["lizardtimeseriessourcessinks"]
                ]
                if obj.get("lizardtimeseriessourcessinks") is not None
                else None,
                "filerastersourcessinks": [
                    FileRasterSourcesSinks.from_dict(_item)
                    for _item in obj["filerastersourcessinks"]
                ]
                if obj.get("filerastersourcessinks") is not None
                else None,
                "filetimeseriessourcessinks": [
                    FileTimeseriesSourcesSinks.from_dict(_item)
                    for _item in obj["filetimeseriessourcessinks"]
                ]
                if obj.get("filetimeseriessourcessinks") is not None
                else None,
                "timeseriessourcessinks": [
                    TimeseriesSourcesSinksOverview.from_dict(_item)
                    for _item in obj["timeseriessourcessinks"]
                ]
                if obj.get("timeseriessourcessinks") is not None
                else None,
                "leakage": [
                    TimeseriesLeakageOverview.from_dict(_item)
                    for _item in obj["leakage"]
                ]
                if obj.get("leakage") is not None
                else None,
                "filetimeseriesleakage": [
                    FileTimeseriesLeakage.from_dict(_item)
                    for _item in obj["filetimeseriesleakage"]
                ]
                if obj.get("filetimeseriesleakage") is not None
                else None,
                "filerasterleakage": [
                    FileRasterLeakage.from_dict(_item)
                    for _item in obj["filerasterleakage"]
                ]
                if obj.get("filerasterleakage") is not None
                else None,
                "initial_twodwaterlevel": TwoDWaterLevel.from_dict(
                    obj["initial_twodwaterlevel"]
                )
                if obj.get("initial_twodwaterlevel") is not None
                else None,
                "initial_onedwaterlevelpredefined": OneDWaterLevelPredefined.from_dict(
                    obj["initial_onedwaterlevelpredefined"]
                )
                if obj.get("initial_onedwaterlevelpredefined") is not None
                else None,
                "initial_groundwaterlevel": GroundWaterLevel.from_dict(
                    obj["initial_groundwaterlevel"]
                )
                if obj.get("initial_groundwaterlevel") is not None
                else None,
                "initial_groundwaterraster": GroundWaterRaster.from_dict(
                    obj["initial_groundwaterraster"]
                )
                if obj.get("initial_groundwaterraster") is not None
                else None,
                "initial_onedwaterlevel": OneDWaterLevel.from_dict(
                    obj["initial_onedwaterlevel"]
                )
                if obj.get("initial_onedwaterlevel") is not None
                else None,
                "initial_onedwaterlevelfile": OneDWaterLevelFile.from_dict(
                    obj["initial_onedwaterlevelfile"]
                )
                if obj.get("initial_onedwaterlevelfile") is not None
                else None,
                "initial_twodwaterraster": TwoDWaterRaster.from_dict(
                    obj["initial_twodwaterraster"]
                )
                if obj.get("initial_twodwaterraster") is not None
                else None,
                "initial_oned_substance_concentrations": [
                    OneDSubstanceConcentration.from_dict(_item)
                    for _item in obj["initial_oned_substance_concentrations"]
                ]
                if obj.get("initial_oned_substance_concentrations") is not None
                else None,
                "initial_twod_substance_concentrations": [
                    TwoDSubstanceConcentration.from_dict(_item)
                    for _item in obj["initial_twod_substance_concentrations"]
                ]
                if obj.get("initial_twod_substance_concentrations") is not None
                else None,
                "initial_groundwater_substance_concentrations": [
                    GroundWaterSubstanceConcentration.from_dict(_item)
                    for _item in obj["initial_groundwater_substance_concentrations"]
                ]
                if obj.get("initial_groundwater_substance_concentrations") is not None
                else None,
                "filerasterrain": [
                    FileRasterRain.from_dict(_item) for _item in obj["filerasterrain"]
                ]
                if obj.get("filerasterrain") is not None
                else None,
                "filetimeseriesrain": [
                    FileTimeseriesRain.from_dict(_item)
                    for _item in obj["filetimeseriesrain"]
                ]
                if obj.get("filetimeseriesrain") is not None
                else None,
                "initial_savedstate": InitialSavedStateOverview.from_dict(
                    obj["initial_savedstate"]
                )
                if obj.get("initial_savedstate") is not None
                else None,
                "savedstates": [
                    SavedStateOverview.from_dict(_item) for _item in obj["savedstates"]
                ]
                if obj.get("savedstates") is not None
                else None,
                "laterals": [Lateral.from_dict(_item) for _item in obj["laterals"]]
                if obj.get("laterals") is not None
                else None,
                "filelaterals": [
                    FileLateral.from_dict(_item) for _item in obj["filelaterals"]
                ]
                if obj.get("filelaterals") is not None
                else None,
                "fileboundaryconditions": FileBoundaryCondition.from_dict(
                    obj["fileboundaryconditions"]
                )
                if obj.get("fileboundaryconditions") is not None
                else None,
                "tablestructurecontrols": [
                    TableStructureControl.from_dict(_item)
                    for _item in obj["tablestructurecontrols"]
                ]
                if obj.get("tablestructurecontrols") is not None
                else None,
                "memorystructurecontrols": [
                    MemoryStructureControl.from_dict(_item)
                    for _item in obj["memorystructurecontrols"]
                ]
                if obj.get("memorystructurecontrols") is not None
                else None,
                "timedstructurecontrols": [
                    TimedStructureControl.from_dict(_item)
                    for _item in obj["timedstructurecontrols"]
                ]
                if obj.get("timedstructurecontrols") is not None
                else None,
                "filestructurecontrols": [
                    FileStructureControl.from_dict(_item)
                    for _item in obj["filestructurecontrols"]
                ]
                if obj.get("filestructurecontrols") is not None
                else None,
                "rasteredits": [
                    RasterEdit.from_dict(_item) for _item in obj["rasteredits"]
                ]
                if obj.get("rasteredits") is not None
                else None,
                "obstacleedits": [
                    ObstacleEdit.from_dict(_item) for _item in obj["obstacleedits"]
                ]
                if obj.get("obstacleedits") is not None
                else None,
                "localrain": [LocalRain.from_dict(_item) for _item in obj["localrain"]]
                if obj.get("localrain") is not None
                else None,
                "wind": [Wind.from_dict(_item) for _item in obj["wind"]]
                if obj.get("wind") is not None
                else None,
                "initial_winddragcoefficient": WindDragCoefficient.from_dict(
                    obj["initial_winddragcoefficient"]
                )
                if obj.get("initial_winddragcoefficient") is not None
                else None,
            }
        )
        return _obj
