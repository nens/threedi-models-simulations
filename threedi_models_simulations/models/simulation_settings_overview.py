# coding: utf-8

"""
3Di API

3Di simulation API (latest stable version: v3)   Framework release: 3.4.71   3Di core release: 3.6.10  deployed on:  09:22AM (UTC) on September 01, 2025

The version of the OpenAPI document: v3
Contact: info@nelen-schuurmans.nl
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List, Optional, Set

from pydantic import BaseModel, ConfigDict
from typing_extensions import Self

from ..models.aggregation_settings import AggregationSettings
from ..models.customized_result_area import CustomizedResultArea
from ..models.numerical_settings import NumericalSettings
from ..models.output_settings import OutputSettings
from ..models.physical_settings import PhysicalSettings
from ..models.time_step_settings import TimeStepSettings
from ..models.water_quality_customized_result_area import (
    WaterQualityCustomizedResultArea,
)
from ..models.water_quality_output_settings import WaterQualityOutputSettings
from ..models.water_quality_settings import WaterQualitySettings


class SimulationSettingsOverview(BaseModel):
    """
    SimulationSettingsOverview
    """  # noqa: E501

    physical_settings: Optional[PhysicalSettings] = None
    numerical_settings: Optional[NumericalSettings] = None
    time_step_settings: Optional[TimeStepSettings] = None
    aggregation_settings: Optional[List[AggregationSettings]] = None
    output_settings: Optional[OutputSettings] = None
    customized_result_areas: Optional[List[CustomizedResultArea]] = None
    water_quality_settings: Optional[WaterQualitySettings] = None
    water_quality_output_settings: Optional[WaterQualityOutputSettings] = None
    water_quality_customized_result_areas: Optional[
        List[WaterQualityCustomizedResultArea]
    ] = None
    __properties: ClassVar[List[str]] = [
        "physical_settings",
        "numerical_settings",
        "time_step_settings",
        "aggregation_settings",
        "output_settings",
        "customized_result_areas",
        "water_quality_settings",
        "water_quality_output_settings",
        "water_quality_customized_result_areas",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SimulationSettingsOverview from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set(
            [
                "aggregation_settings",
                "customized_result_areas",
                "water_quality_customized_result_areas",
            ]
        )

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of physical_settings
        if self.physical_settings:
            _dict["physical_settings"] = self.physical_settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of numerical_settings
        if self.numerical_settings:
            _dict["numerical_settings"] = self.numerical_settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of time_step_settings
        if self.time_step_settings:
            _dict["time_step_settings"] = self.time_step_settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in aggregation_settings (list)
        _items = []
        if self.aggregation_settings:
            for _item_aggregation_settings in self.aggregation_settings:
                if _item_aggregation_settings:
                    _items.append(_item_aggregation_settings.to_dict())
            _dict["aggregation_settings"] = _items
        # override the default output from pydantic by calling `to_dict()` of output_settings
        if self.output_settings:
            _dict["output_settings"] = self.output_settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in customized_result_areas (list)
        _items = []
        if self.customized_result_areas:
            for _item_customized_result_areas in self.customized_result_areas:
                if _item_customized_result_areas:
                    _items.append(_item_customized_result_areas.to_dict())
            _dict["customized_result_areas"] = _items
        # override the default output from pydantic by calling `to_dict()` of water_quality_settings
        if self.water_quality_settings:
            _dict["water_quality_settings"] = self.water_quality_settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of water_quality_output_settings
        if self.water_quality_output_settings:
            _dict["water_quality_output_settings"] = (
                self.water_quality_output_settings.to_dict()
            )
        # override the default output from pydantic by calling `to_dict()` of each item in water_quality_customized_result_areas (list)
        _items = []
        if self.water_quality_customized_result_areas:
            for (
                _item_water_quality_customized_result_areas
            ) in self.water_quality_customized_result_areas:
                if _item_water_quality_customized_result_areas:
                    _items.append(_item_water_quality_customized_result_areas.to_dict())
            _dict["water_quality_customized_result_areas"] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SimulationSettingsOverview from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "physical_settings": PhysicalSettings.from_dict(
                    obj["physical_settings"]
                )
                if obj.get("physical_settings") is not None
                else None,
                "numerical_settings": NumericalSettings.from_dict(
                    obj["numerical_settings"]
                )
                if obj.get("numerical_settings") is not None
                else None,
                "time_step_settings": TimeStepSettings.from_dict(
                    obj["time_step_settings"]
                )
                if obj.get("time_step_settings") is not None
                else None,
                "aggregation_settings": [
                    AggregationSettings.from_dict(_item)
                    for _item in obj["aggregation_settings"]
                ]
                if obj.get("aggregation_settings") is not None
                else None,
                "output_settings": OutputSettings.from_dict(obj["output_settings"])
                if obj.get("output_settings") is not None
                else None,
                "customized_result_areas": [
                    CustomizedResultArea.from_dict(_item)
                    for _item in obj["customized_result_areas"]
                ]
                if obj.get("customized_result_areas") is not None
                else None,
                "water_quality_settings": WaterQualitySettings.from_dict(
                    obj["water_quality_settings"]
                )
                if obj.get("water_quality_settings") is not None
                else None,
                "water_quality_output_settings": WaterQualityOutputSettings.from_dict(
                    obj["water_quality_output_settings"]
                )
                if obj.get("water_quality_output_settings") is not None
                else None,
                "water_quality_customized_result_areas": [
                    WaterQualityCustomizedResultArea.from_dict(_item)
                    for _item in obj["water_quality_customized_result_areas"]
                ]
                if obj.get("water_quality_customized_result_areas") is not None
                else None,
            }
        )
        return _obj
