# coding: utf-8

"""
3Di API

3Di simulation API (latest stable version: v3)   Framework release: 3.4.71   3Di core release: 3.6.10  deployed on:  09:22AM (UTC) on September 01, 2025

The version of the OpenAPI document: v3
Contact: info@nelen-schuurmans.nl
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List, Optional, Set, Union

from pydantic import (
    BaseModel,
    ConfigDict,
    Field,
    StrictFloat,
    StrictInt,
    StrictStr,
    field_validator,
)
from typing_extensions import Annotated, Self


class AggregationSettings(BaseModel):
    """
    AggregationSettings
    """  # noqa: E501

    url: Optional[StrictStr] = None
    name: Optional[Annotated[str, Field(strict=True, max_length=120)]] = Field(
        default=None,
        description="Give your aggregation setting a name to be able to find it back in the results file.",
    )
    flow_variable: StrictStr = Field(
        description="Options:  water_level = Water Level flow_velocity = Flow Velocity discharge = Discharge volume = Volume pump_discharge = Pump Discharge wet_cross_section = Wet Cross Section lateral_discharge = Lateral Discharge wet_surface = Wet Surface rain = Rain simple_infiltration = Simple Infiltration leakage = Leakage interception = Interception surface_source_sink_discharge = Surface Source Sink Discharge "
    )
    method: StrictStr = Field(
        description="Options:  min = minimum value of the variable in the configured interval max = maximum value of the variable in the configured interval avg = average value of the variable in the configured interval cum = variable integration over time [dt * variable] cum_positive = variable integration over time [dt * variable] in positive direction cum_negative = variable integration over time [dt * variable] in negative direction current = current value of a variable sum = variable summation over configured interval  Note: 'current' is required in case one checks the water balance for variables that are the result of the processes. Only valid for flow_variable 'volume' and 'intercepted_volume'"
    )
    interval: Union[StrictFloat, StrictInt] = Field(
        description="aggregation interval in seconds"
    )
    __properties: ClassVar[List[str]] = [
        "url",
        "name",
        "flow_variable",
        "method",
        "interval",
    ]

    @field_validator("flow_variable")
    def flow_variable_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(
            [
                "water_level",
                "flow_velocity",
                "discharge",
                "volume",
                "pump_discharge",
                "wet_cross_section",
                "lateral_discharge",
                "wet_surface",
                "rain",
                "simple_infiltration",
                "leakage",
                "interception",
                "surface_source_sink_discharge",
            ]
        ):
            raise ValueError(
                "must be one of enum values ('water_level', 'flow_velocity', 'discharge', 'volume', 'pump_discharge', 'wet_cross_section', 'lateral_discharge', 'wet_surface', 'rain', 'simple_infiltration', 'leakage', 'interception', 'surface_source_sink_discharge')"
            )
        return value

    @field_validator("method")
    def method_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(
            [
                "min",
                "max",
                "avg",
                "cum",
                "cum_positive",
                "cum_negative",
                "current",
                "sum",
            ]
        ):
            raise ValueError(
                "must be one of enum values ('min', 'max', 'avg', 'cum', 'cum_positive', 'cum_negative', 'current', 'sum')"
            )
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AggregationSettings from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set(
            [
                "url",
            ]
        )

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict["name"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AggregationSettings from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "url": obj.get("url"),
                "name": obj.get("name"),
                "flow_variable": obj.get("flow_variable"),
                "method": obj.get("method"),
                "interval": obj.get("interval"),
            }
        )
        return _obj
