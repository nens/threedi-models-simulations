# coding: utf-8

"""
3Di API

3Di simulation API (latest stable version: v3)   Framework release: 3.4.71   3Di core release: 3.6.10  deployed on:  09:22AM (UTC) on September 01, 2025

The version of the OpenAPI document: v3
Contact: info@nelen-schuurmans.nl
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List, Optional, Set

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing_extensions import Annotated, Self


class BoundaryCondition(BaseModel):
    """
    BoundaryCondition
    """  # noqa: E501

    id: Optional[StrictInt] = None
    url: Optional[StrictStr] = None
    boundary_id: Annotated[int, Field(le=2147483647, strict=True, ge=-2147483648)]
    threedimodel: Optional[StrictStr] = None
    type: StrictStr
    dimension: StrictStr
    __properties: ClassVar[List[str]] = [
        "id",
        "url",
        "boundary_id",
        "threedimodel",
        "type",
        "dimension",
    ]

    @field_validator("type")
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(
            ["velocity", "sommerfeldt", "riemann", "water_level", "discharge"]
        ):
            raise ValueError(
                "must be one of enum values ('velocity', 'sommerfeldt', 'riemann', 'water_level', 'discharge')"
            )
        return value

    @field_validator("dimension")
    def dimension_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(["one_d", "two_d"]):
            raise ValueError("must be one of enum values ('one_d', 'two_d')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BoundaryCondition from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set(
            [
                "id",
                "url",
                "threedimodel",
            ]
        )

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BoundaryCondition from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "id": obj.get("id"),
                "url": obj.get("url"),
                "boundary_id": obj.get("boundary_id"),
                "threedimodel": obj.get("threedimodel"),
                "type": obj.get("type"),
                "dimension": obj.get("dimension"),
            }
        )
        return _obj
