# coding: utf-8

"""
3Di API

3Di simulation API (latest stable version: v3)   Framework release: 3.4.71   3Di core release: 3.6.10  deployed on:  09:22AM (UTC) on September 01, 2025

The version of the OpenAPI document: v3
Contact: info@nelen-schuurmans.nl
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from datetime import datetime
from typing import Any, ClassVar, Dict, List, Optional, Set

from pydantic import (
    BaseModel,
    ConfigDict,
    Field,
    StrictBool,
    StrictInt,
    StrictStr,
    field_validator,
)
from typing_extensions import Annotated, Self

from ..models.extent import Extent


class ThreediModel(BaseModel):
    """
    ThreediModel
    """  # noqa: E501

    url: Optional[StrictStr] = None
    id: Optional[StrictInt] = None
    user: Optional[StrictStr] = Field(
        default=None, description="The username of a user"
    )
    threedi_version: Optional[Annotated[str, Field(min_length=1, strict=True)]] = Field(
        default=None, description="The 3Di API version that created this threedimodel."
    )
    breach_count: Optional[
        Annotated[int, Field(le=2147483647, strict=True, ge=-2147483648)]
    ] = None
    revision: StrictStr
    revision_id: Optional[StrictInt] = None
    revision_hash: Optional[StrictStr] = None
    revision_number: Optional[StrictStr] = None
    revision_commit_date: Optional[StrictStr] = None
    schematisation_id: Optional[StrictInt] = None
    schematisation_name: Optional[StrictStr] = None
    repository_slug: Optional[StrictStr] = None
    name: Optional[Annotated[str, Field(min_length=1, strict=True)]] = None
    slug: Annotated[str, Field(min_length=1, strict=True, max_length=512)]
    disabled: Optional[StrictBool] = Field(
        default=None, description="Disable the model."
    )
    is_valid: Optional[StrictBool] = Field(
        default=None,
        description="True if the threedimodel was generated without errors.",
    )
    epsg: Optional[
        Annotated[int, Field(le=2147483647, strict=True, ge=-2147483648)]
    ] = None
    description: Optional[StrictStr] = Field(
        default=None, description="Please describe the model here..."
    )
    storage_space: Optional[
        Annotated[
            int, Field(le=9223372036854775807, strict=True, ge=-9223372036854775808)
        ]
    ] = Field(
        default=None, description="Automatically filled after threedimodel generation."
    )
    storage_space_humanized: Optional[StrictStr] = None
    model_ini: Optional[Annotated[str, Field(strict=True, max_length=512)]] = None
    extent_two_d: Optional[Extent] = None
    extent_one_d: Optional[Extent] = None
    extent_zero_d: Optional[Extent] = None
    nodes_count: Optional[
        Annotated[int, Field(le=2147483647, strict=True, ge=-2147483648)]
    ] = None
    lines_count: Optional[
        Annotated[int, Field(le=2147483647, strict=True, ge=-2147483648)]
    ] = None
    inpy_version: StrictStr
    inp_success: Optional[StrictBool] = None
    created: Optional[datetime] = None
    __properties: ClassVar[List[str]] = [
        "url",
        "id",
        "user",
        "threedi_version",
        "breach_count",
        "revision",
        "revision_id",
        "revision_hash",
        "revision_number",
        "revision_commit_date",
        "schematisation_id",
        "schematisation_name",
        "repository_slug",
        "name",
        "slug",
        "disabled",
        "is_valid",
        "epsg",
        "description",
        "storage_space",
        "storage_space_humanized",
        "model_ini",
        "extent_two_d",
        "extent_one_d",
        "extent_zero_d",
        "nodes_count",
        "lines_count",
        "inpy_version",
        "inp_success",
        "created",
    ]

    @field_validator("slug")
    def slug_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if not re.match(r"^[-a-zA-Z0-9_]+$", value):
            raise ValueError(r"must validate the regular expression /^[-a-zA-Z0-9_]+$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ThreediModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set(
            [
                "url",
                "id",
                "user",
                "threedi_version",
                "revision_id",
                "revision_hash",
                "revision_number",
                "revision_commit_date",
                "schematisation_id",
                "schematisation_name",
                "repository_slug",
                "storage_space_humanized",
                "created",
            ]
        )

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of extent_two_d
        if self.extent_two_d:
            _dict["extent_two_d"] = self.extent_two_d.to_dict()
        # override the default output from pydantic by calling `to_dict()` of extent_one_d
        if self.extent_one_d:
            _dict["extent_one_d"] = self.extent_one_d.to_dict()
        # override the default output from pydantic by calling `to_dict()` of extent_zero_d
        if self.extent_zero_d:
            _dict["extent_zero_d"] = self.extent_zero_d.to_dict()
        # set to None if threedi_version (nullable) is None
        # and model_fields_set contains the field
        if self.threedi_version is None and "threedi_version" in self.model_fields_set:
            _dict["threedi_version"] = None

        # set to None if breach_count (nullable) is None
        # and model_fields_set contains the field
        if self.breach_count is None and "breach_count" in self.model_fields_set:
            _dict["breach_count"] = None

        # set to None if revision_id (nullable) is None
        # and model_fields_set contains the field
        if self.revision_id is None and "revision_id" in self.model_fields_set:
            _dict["revision_id"] = None

        # set to None if schematisation_id (nullable) is None
        # and model_fields_set contains the field
        if (
            self.schematisation_id is None
            and "schematisation_id" in self.model_fields_set
        ):
            _dict["schematisation_id"] = None

        # set to None if is_valid (nullable) is None
        # and model_fields_set contains the field
        if self.is_valid is None and "is_valid" in self.model_fields_set:
            _dict["is_valid"] = None

        # set to None if epsg (nullable) is None
        # and model_fields_set contains the field
        if self.epsg is None and "epsg" in self.model_fields_set:
            _dict["epsg"] = None

        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and "description" in self.model_fields_set:
            _dict["description"] = None

        # set to None if model_ini (nullable) is None
        # and model_fields_set contains the field
        if self.model_ini is None and "model_ini" in self.model_fields_set:
            _dict["model_ini"] = None

        # set to None if nodes_count (nullable) is None
        # and model_fields_set contains the field
        if self.nodes_count is None and "nodes_count" in self.model_fields_set:
            _dict["nodes_count"] = None

        # set to None if lines_count (nullable) is None
        # and model_fields_set contains the field
        if self.lines_count is None and "lines_count" in self.model_fields_set:
            _dict["lines_count"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ThreediModel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "url": obj.get("url"),
                "id": obj.get("id"),
                "user": obj.get("user"),
                "threedi_version": obj.get("threedi_version"),
                "breach_count": obj.get("breach_count"),
                "revision": obj.get("revision"),
                "revision_id": obj.get("revision_id"),
                "revision_hash": obj.get("revision_hash"),
                "revision_number": obj.get("revision_number"),
                "revision_commit_date": obj.get("revision_commit_date"),
                "schematisation_id": obj.get("schematisation_id"),
                "schematisation_name": obj.get("schematisation_name"),
                "repository_slug": obj.get("repository_slug"),
                "name": obj.get("name"),
                "slug": obj.get("slug"),
                "disabled": obj.get("disabled"),
                "is_valid": obj.get("is_valid"),
                "epsg": obj.get("epsg"),
                "description": obj.get("description"),
                "storage_space": obj.get("storage_space"),
                "storage_space_humanized": obj.get("storage_space_humanized"),
                "model_ini": obj.get("model_ini"),
                "extent_two_d": Extent.from_dict(obj["extent_two_d"])
                if obj.get("extent_two_d") is not None
                else None,
                "extent_one_d": Extent.from_dict(obj["extent_one_d"])
                if obj.get("extent_one_d") is not None
                else None,
                "extent_zero_d": Extent.from_dict(obj["extent_zero_d"])
                if obj.get("extent_zero_d") is not None
                else None,
                "nodes_count": obj.get("nodes_count"),
                "lines_count": obj.get("lines_count"),
                "inpy_version": obj.get("inpy_version"),
                "inp_success": obj.get("inp_success"),
                "created": obj.get("created"),
            }
        )
        return _obj
