# coding: utf-8

"""
3Di API

3Di simulation API (latest stable version: v3)   Framework release: 3.4.71   3Di core release: 3.6.10  deployed on:  09:22AM (UTC) on September 01, 2025

The version of the OpenAPI document: v3
Contact: info@nelen-schuurmans.nl
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List, Optional, Set

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing_extensions import Annotated, Self

from ..models.measure_location import MeasureLocation


class MeasureSpecification(BaseModel):
    """
    MeasureSpecification
    """  # noqa: E501

    id: Optional[StrictInt] = None
    name: Optional[Annotated[str, Field(strict=True, max_length=50)]] = None
    locations: List[MeasureLocation]
    variable: StrictStr = Field(
        description="measurement variable, one of the following options:  s1 (waterlevel) vol1 (volume) q (discharge) u1 (velocity) "
    )
    operator: StrictStr = Field(description="e.g. >, <, >=, <=")
    __properties: ClassVar[List[str]] = [
        "id",
        "name",
        "locations",
        "variable",
        "operator",
    ]

    @field_validator("variable")
    def variable_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(["s1", "vol1", "q", "u1"]):
            raise ValueError("must be one of enum values ('s1', 'vol1', 'q', 'u1')")
        return value

    @field_validator("operator")
    def operator_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set([">", ">=", "<", "<="]):
            raise ValueError("must be one of enum values ('>', '>=', '<', '<=')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MeasureSpecification from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set(
            [
                "id",
            ]
        )

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in locations (list)
        _items = []
        if self.locations:
            for _item_locations in self.locations:
                if _item_locations:
                    _items.append(_item_locations.to_dict())
            _dict["locations"] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MeasureSpecification from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "id": obj.get("id"),
                "name": obj.get("name"),
                "locations": [
                    MeasureLocation.from_dict(_item) for _item in obj["locations"]
                ]
                if obj.get("locations") is not None
                else None,
                "variable": obj.get("variable"),
                "operator": obj.get("operator"),
            }
        )
        return _obj
