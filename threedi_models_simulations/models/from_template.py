# coding: utf-8

"""
3Di API

3Di simulation API (latest stable version: v3)   Framework release: 3.4.71   3Di core release: 3.6.10  deployed on:  09:22AM (UTC) on September 01, 2025

The version of the OpenAPI document: v3
Contact: info@nelen-schuurmans.nl
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from datetime import datetime
from typing import Any, ClassVar, Dict, List, Optional, Set

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing_extensions import Annotated, Self


class FromTemplate(BaseModel):
    """
    FromTemplate
    """  # noqa: E501

    template: StrictStr = Field(description="source simulation template id")
    threedimodel: Optional[StrictStr] = Field(
        default=None, description="The id of a threedimodel"
    )
    name: Annotated[str, Field(min_length=1, strict=True, max_length=128)]
    tags: Optional[List[Optional[StrictStr]]] = None
    organisation: Annotated[str, Field(min_length=1, strict=True)]
    start_datetime: datetime
    end_datetime: Optional[datetime] = None
    duration: Optional[StrictInt] = None
    clone_events: Optional[StrictBool] = True
    clone_initials: Optional[StrictBool] = True
    clone_settings: Optional[StrictBool] = True
    started_from: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = [
        "template",
        "threedimodel",
        "name",
        "tags",
        "organisation",
        "start_datetime",
        "end_datetime",
        "duration",
        "clone_events",
        "clone_initials",
        "clone_settings",
        "started_from",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of FromTemplate from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of FromTemplate from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "template": obj.get("template"),
                "threedimodel": obj.get("threedimodel"),
                "name": obj.get("name"),
                "tags": obj.get("tags"),
                "organisation": obj.get("organisation"),
                "start_datetime": obj.get("start_datetime"),
                "end_datetime": obj.get("end_datetime"),
                "duration": obj.get("duration"),
                "clone_events": obj.get("clone_events")
                if obj.get("clone_events") is not None
                else True,
                "clone_initials": obj.get("clone_initials")
                if obj.get("clone_initials") is not None
                else True,
                "clone_settings": obj.get("clone_settings")
                if obj.get("clone_settings") is not None
                else True,
                "started_from": obj.get("started_from"),
            }
        )
        return _obj
