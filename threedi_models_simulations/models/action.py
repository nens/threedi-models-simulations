# coding: utf-8

"""
3Di API

3Di simulation API (latest stable version: v3)   Framework release: 3.4.71   3Di core release: 3.6.10  deployed on:  09:22AM (UTC) on September 01, 2025

The version of the OpenAPI document: v3
Contact: info@nelen-schuurmans.nl
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List, Optional, Set, Union

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing_extensions import Annotated, Self


class Action(BaseModel):
    """
    Action
    """  # noqa: E501

    name: StrictStr
    duration: Optional[Annotated[int, Field(strict=True, ge=1)]] = Field(
        default=None,
        description="Only valid for name='start'. Run simulation for given duration (in seconds) and pause",
    )
    timeout: Optional[Annotated[int, Field(strict=True, ge=30)]] = Field(
        default=None,
        description="Only valid for name='pause'. Remove simulation after given timeout (in seconds). Defaults to 300 seconds",
    )
    max_rate: Optional[
        Union[
            Annotated[float, Field(strict=True, ge=1)],
            Annotated[int, Field(strict=True, ge=1)],
        ]
    ] = Field(
        default=None,
        description="Only valid for name='start'. Limit maximum speed of the simulation. The max_rate is a multiplier relative to real time For example max_rate '60' means max 60 simulation seconds in 1 real second ",
    )
    compute_cluster: Optional[StrictStr] = Field(
        default=None,
        description="The name of the compute cluster that runs/has run the simulation.",
    )
    simulation_runner: Optional[StrictStr] = Field(
        default=None,
        description="Only allowed for name values: 'start', 'initialize' or 'queue Simulation runner version used to execute the simulation. If not filled in the default version is used. (Note: used for testing new calccore releases on the staging environment. On production only the default version can be picked)",
    )
    __properties: ClassVar[List[str]] = [
        "name",
        "duration",
        "timeout",
        "max_rate",
        "compute_cluster",
        "simulation_runner",
    ]

    @field_validator("name")
    def name_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(
            ["initialize", "start", "pause", "shutdown", "queue", "dequeue"]
        ):
            raise ValueError(
                "must be one of enum values ('initialize', 'start', 'pause', 'shutdown', 'queue', 'dequeue')"
            )
        return value

    @field_validator("simulation_runner")
    def simulation_runner_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(["3.4.71-3.6.10"]):
            raise ValueError("must be one of enum values ('3.4.71-3.6.10')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Action from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Action from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "name": obj.get("name"),
                "duration": obj.get("duration"),
                "timeout": obj.get("timeout"),
                "max_rate": obj.get("max_rate"),
                "compute_cluster": obj.get("compute_cluster"),
                "simulation_runner": obj.get("simulation_runner"),
            }
        )
        return _obj
