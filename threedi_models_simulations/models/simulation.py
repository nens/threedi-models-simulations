# coding: utf-8

"""
3Di API

3Di simulation API (latest stable version: v3)   Framework release: 3.4.71   3Di core release: 3.6.10  deployed on:  09:22AM (UTC) on September 01, 2025

The version of the OpenAPI document: v3
Contact: info@nelen-schuurmans.nl
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from datetime import datetime
from typing import Any, ClassVar, Dict, List, Optional, Set
from uuid import UUID

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing_extensions import Annotated, Self


class Simulation(BaseModel):
    """
    Simulation
    """  # noqa: E501

    url: Optional[StrictStr] = None
    slug: Optional[Annotated[str, Field(min_length=1, strict=True)]] = None
    uuid: Optional[UUID] = None
    name: Annotated[str, Field(min_length=1, strict=True, max_length=128)]
    tags: Optional[List[StrictStr]] = Field(
        default=None, description="tags provided as a list of strings"
    )
    created: Optional[StrictStr] = None
    threedimodel: StrictStr = Field(description="The id of a threedimodel")
    organisation: StrictStr = Field(description="The unique_id of an organisation")
    organisation_name: Optional[StrictStr] = None
    user: Optional[Annotated[str, Field(strict=True)]] = Field(
        default=None, description="The username of a user"
    )
    start_datetime: datetime
    end_datetime: Optional[datetime] = None
    duration: Optional[StrictInt] = None
    duration_humanized: Optional[StrictStr] = None
    threedimodel_id: Optional[StrictInt] = None
    id: Optional[StrictInt] = None
    threedicore_version: Optional[
        Annotated[str, Field(min_length=1, strict=True, max_length=16)]
    ] = None
    cloned_from: Optional[StrictStr] = None
    compute_cluster: Optional[StrictStr] = Field(
        default=None,
        description="The name of the compute cluster that runs/has run the simulation.",
    )
    started_from: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = [
        "url",
        "slug",
        "uuid",
        "name",
        "tags",
        "created",
        "threedimodel",
        "organisation",
        "organisation_name",
        "user",
        "start_datetime",
        "end_datetime",
        "duration",
        "duration_humanized",
        "threedimodel_id",
        "id",
        "threedicore_version",
        "cloned_from",
        "compute_cluster",
        "started_from",
    ]

    @field_validator("slug")
    def slug_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^[-a-zA-Z0-9_]+$", value):
            raise ValueError(r"must validate the regular expression /^[-a-zA-Z0-9_]+$/")
        return value

    @field_validator("user")
    def user_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^[\w.@+-]+$", value):
            raise ValueError(r"must validate the regular expression /^[\w.@+-]+$/")
        return value

    @field_validator("started_from")
    def started_from_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(["", "3Di Live", "3Di Modeller Interface"]):
            raise ValueError(
                "must be one of enum values ('', '3Di Live', '3Di Modeller Interface')"
            )
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Simulation from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set(
            [
                "url",
                "slug",
                "uuid",
                "created",
                "organisation_name",
                "user",
                "duration_humanized",
                "threedimodel_id",
                "id",
                "cloned_from",
                "compute_cluster",
            ]
        )

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if threedicore_version (nullable) is None
        # and model_fields_set contains the field
        if (
            self.threedicore_version is None
            and "threedicore_version" in self.model_fields_set
        ):
            _dict["threedicore_version"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Simulation from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "url": obj.get("url"),
                "slug": obj.get("slug"),
                "uuid": obj.get("uuid"),
                "name": obj.get("name"),
                "tags": obj.get("tags"),
                "created": obj.get("created"),
                "threedimodel": obj.get("threedimodel"),
                "organisation": obj.get("organisation"),
                "organisation_name": obj.get("organisation_name"),
                "user": obj.get("user"),
                "start_datetime": obj.get("start_datetime"),
                "end_datetime": obj.get("end_datetime"),
                "duration": obj.get("duration"),
                "duration_humanized": obj.get("duration_humanized"),
                "threedimodel_id": obj.get("threedimodel_id"),
                "id": obj.get("id"),
                "threedicore_version": obj.get("threedicore_version"),
                "cloned_from": obj.get("cloned_from"),
                "compute_cluster": obj.get("compute_cluster"),
                "started_from": obj.get("started_from"),
            }
        )
        return _obj
