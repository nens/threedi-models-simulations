# coding: utf-8

"""
3Di API

3Di simulation API (latest stable version: v3)   Framework release: 3.4.71   3Di core release: 3.6.10  deployed on:  09:22AM (UTC) on September 01, 2025

The version of the OpenAPI document: v3
Contact: info@nelen-schuurmans.nl
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List, Optional, Set

from pydantic import BaseModel, ConfigDict, StrictInt, StrictStr
from typing_extensions import Self


class DamageEstimation(BaseModel):
    """
    DamageEstimation
    """  # noqa: E501

    damage_table: Optional[StrictStr] = "3Di-V1"
    elevation_raster_uuid: Optional[StrictStr] = "36588275-f3e3-4120-8c1e-602f7ae85386"
    landcover_raster_uuid: Optional[StrictStr] = "717478ef-099d-41d8-971d-8b4309e59d92"
    road_rail_raster_uuid: Optional[StrictStr] = "e40c1b96-e71f-462c-8acb-59a3a8b7db89"
    cost_type: Optional[StrictInt] = None
    flood_month: Optional[StrictInt] = None
    inundation_period: Optional[StrictInt] = None
    repair_time_infrastructure: Optional[StrictInt] = None
    repair_time_buildings: Optional[StrictInt] = None
    __properties: ClassVar[List[str]] = [
        "damage_table",
        "elevation_raster_uuid",
        "landcover_raster_uuid",
        "road_rail_raster_uuid",
        "cost_type",
        "flood_month",
        "inundation_period",
        "repair_time_infrastructure",
        "repair_time_buildings",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DamageEstimation from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set(
            [
                "damage_table",
                "elevation_raster_uuid",
                "landcover_raster_uuid",
                "road_rail_raster_uuid",
                "cost_type",
                "flood_month",
                "inundation_period",
                "repair_time_infrastructure",
                "repair_time_buildings",
            ]
        )

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DamageEstimation from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "damage_table": obj.get("damage_table")
                if obj.get("damage_table") is not None
                else "3Di-V1",
                "elevation_raster_uuid": obj.get("elevation_raster_uuid")
                if obj.get("elevation_raster_uuid") is not None
                else "36588275-f3e3-4120-8c1e-602f7ae85386",
                "landcover_raster_uuid": obj.get("landcover_raster_uuid")
                if obj.get("landcover_raster_uuid") is not None
                else "717478ef-099d-41d8-971d-8b4309e59d92",
                "road_rail_raster_uuid": obj.get("road_rail_raster_uuid")
                if obj.get("road_rail_raster_uuid") is not None
                else "e40c1b96-e71f-462c-8acb-59a3a8b7db89",
                "cost_type": obj.get("cost_type"),
                "flood_month": obj.get("flood_month"),
                "inundation_period": obj.get("inundation_period"),
                "repair_time_infrastructure": obj.get("repair_time_infrastructure"),
                "repair_time_buildings": obj.get("repair_time_buildings"),
            }
        )
        return _obj
