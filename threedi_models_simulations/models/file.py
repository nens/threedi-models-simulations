# coding: utf-8

"""
3Di API

3Di simulation API (latest stable version: v3)   Framework release: 3.4.71   3Di core release: 3.6.10  deployed on:  09:22AM (UTC) on September 01, 2025

The version of the OpenAPI document: v3
Contact: info@nelen-schuurmans.nl
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from datetime import date
from typing import Any, ClassVar, Dict, List, Optional, Set

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing_extensions import Annotated, Self


class File(BaseModel):
    """
    File
    """  # noqa: E501

    url: Optional[StrictStr] = None
    storage_name: Optional[Annotated[str, Field(min_length=1, strict=True)]] = None
    filename: Annotated[str, Field(min_length=1, strict=True, max_length=256)]
    bucket: Annotated[str, Field(min_length=1, strict=True, max_length=256)]
    prefix: Optional[Annotated[str, Field(strict=True, max_length=256)]] = None
    etag: Optional[Annotated[str, Field(strict=True, max_length=256)]] = Field(
        default=None, description="Optional eTag (md5sum)"
    )
    size: Optional[
        Annotated[
            int, Field(le=9223372036854775807, strict=True, ge=-9223372036854775808)
        ]
    ] = Field(default=None, description="Filesize in bytes")
    expiry_date: Optional[date] = None
    related_object: Optional[StrictStr] = None
    type: StrictStr
    state: StrictStr
    state_description: Optional[Annotated[str, Field(strict=True, max_length=512)]] = (
        None
    )
    meta: Optional[Dict[str, Any]] = None
    id: Optional[StrictInt] = None
    __properties: ClassVar[List[str]] = [
        "url",
        "storage_name",
        "filename",
        "bucket",
        "prefix",
        "etag",
        "size",
        "expiry_date",
        "related_object",
        "type",
        "state",
        "state_description",
        "meta",
        "id",
    ]

    @field_validator("type")
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(
            [
                "timeseries",
                "rastertimeseries",
                "savedstate",
                "results",
                "rasters",
                "gridadmin",
                "geopackage",
                "geojson",
                "initialwaterlevel",
                "initial_substance_concentration",
                "bulklateral",
                "bulkcontrol",
                "bulk_boundaryconditions",
                "sqlite",
                "tables",
            ]
        ):
            raise ValueError(
                "must be one of enum values ('timeseries', 'rastertimeseries', 'savedstate', 'results', 'rasters', 'gridadmin', 'geopackage', 'geojson', 'initialwaterlevel', 'initial_substance_concentration', 'bulklateral', 'bulkcontrol', 'bulk_boundaryconditions', 'sqlite', 'tables')"
            )
        return value

    @field_validator("state")
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(["created", "uploaded", "processed", "error", "removed"]):
            raise ValueError(
                "must be one of enum values ('created', 'uploaded', 'processed', 'error', 'removed')"
            )
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of File from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set(
            [
                "url",
                "storage_name",
                "related_object",
                "id",
            ]
        )

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if prefix (nullable) is None
        # and model_fields_set contains the field
        if self.prefix is None and "prefix" in self.model_fields_set:
            _dict["prefix"] = None

        # set to None if etag (nullable) is None
        # and model_fields_set contains the field
        if self.etag is None and "etag" in self.model_fields_set:
            _dict["etag"] = None

        # set to None if size (nullable) is None
        # and model_fields_set contains the field
        if self.size is None and "size" in self.model_fields_set:
            _dict["size"] = None

        # set to None if state_description (nullable) is None
        # and model_fields_set contains the field
        if (
            self.state_description is None
            and "state_description" in self.model_fields_set
        ):
            _dict["state_description"] = None

        # set to None if meta (nullable) is None
        # and model_fields_set contains the field
        if self.meta is None and "meta" in self.model_fields_set:
            _dict["meta"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of File from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "url": obj.get("url"),
                "storage_name": obj.get("storage_name"),
                "filename": obj.get("filename"),
                "bucket": obj.get("bucket"),
                "prefix": obj.get("prefix"),
                "etag": obj.get("etag"),
                "size": obj.get("size"),
                "expiry_date": obj.get("expiry_date"),
                "related_object": obj.get("related_object"),
                "type": obj.get("type"),
                "state": obj.get("state"),
                "state_description": obj.get("state_description"),
                "meta": obj.get("meta"),
                "id": obj.get("id"),
            }
        )
        return _obj
