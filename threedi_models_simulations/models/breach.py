# coding: utf-8

"""
3Di API

3Di simulation API (latest stable version: v3)   Framework release: 3.4.71   3Di core release: 3.6.10  deployed on:  09:22AM (UTC) on September 01, 2025

The version of the OpenAPI document: v3
Contact: info@nelen-schuurmans.nl
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List, Optional, Set, Union
from uuid import UUID

from pydantic import (
    BaseModel,
    ConfigDict,
    Field,
    StrictFloat,
    StrictInt,
    StrictStr,
    field_validator,
)
from typing_extensions import Annotated, Self


class Breach(BaseModel):
    """
    Breach
    """  # noqa: E501

    url: Optional[StrictStr] = None
    potential_breach: Optional[StrictStr] = None
    line_id: Optional[Annotated[int, Field(le=2147483647, strict=True, ge=0)]] = Field(
        default=None, description="The id of the flowline ('levl' in the geojson)"
    )
    duration_till_max_depth: Annotated[int, Field(le=2147483647, strict=True, ge=0)] = (
        Field(description="Duration till maximum depth, in seconds")
    )
    maximum_breach_depth: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None,
        description="The maximum breach depth relative to the crest level, in meters",
    )
    levee_material: Optional[StrictStr] = None
    initial_width: Union[StrictFloat, StrictInt] = Field(
        description="initial width in meters"
    )
    discharge_coefficient_positive: Optional[Union[StrictFloat, StrictInt]] = None
    discharge_coefficient_negative: Optional[Union[StrictFloat, StrictInt]] = None
    simulation: Optional[StrictStr] = None
    offset: Annotated[int, Field(le=2147483647, strict=True, ge=0)] = Field(
        description="offset of event in simulation in seconds"
    )
    id: Optional[StrictInt] = None
    uid: Optional[UUID] = None
    __properties: ClassVar[List[str]] = [
        "url",
        "potential_breach",
        "line_id",
        "duration_till_max_depth",
        "maximum_breach_depth",
        "levee_material",
        "initial_width",
        "discharge_coefficient_positive",
        "discharge_coefficient_negative",
        "simulation",
        "offset",
        "id",
        "uid",
    ]

    @field_validator("levee_material")
    def levee_material_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(["sand", "clay"]):
            raise ValueError("must be one of enum values ('sand', 'clay')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Breach from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set(
            [
                "url",
                "simulation",
                "id",
                "uid",
            ]
        )

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if discharge_coefficient_positive (nullable) is None
        # and model_fields_set contains the field
        if (
            self.discharge_coefficient_positive is None
            and "discharge_coefficient_positive" in self.model_fields_set
        ):
            _dict["discharge_coefficient_positive"] = None

        # set to None if discharge_coefficient_negative (nullable) is None
        # and model_fields_set contains the field
        if (
            self.discharge_coefficient_negative is None
            and "discharge_coefficient_negative" in self.model_fields_set
        ):
            _dict["discharge_coefficient_negative"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Breach from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "url": obj.get("url"),
                "potential_breach": obj.get("potential_breach"),
                "line_id": obj.get("line_id"),
                "duration_till_max_depth": obj.get("duration_till_max_depth"),
                "maximum_breach_depth": obj.get("maximum_breach_depth"),
                "levee_material": obj.get("levee_material"),
                "initial_width": obj.get("initial_width"),
                "discharge_coefficient_positive": obj.get(
                    "discharge_coefficient_positive"
                ),
                "discharge_coefficient_negative": obj.get(
                    "discharge_coefficient_negative"
                ),
                "simulation": obj.get("simulation"),
                "offset": obj.get("offset"),
                "id": obj.get("id"),
                "uid": obj.get("uid"),
            }
        )
        return _obj
