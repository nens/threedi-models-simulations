# coding: utf-8

"""
3Di API

3Di simulation API (latest stable version: v3)   Framework release: 3.4.71   3Di core release: 3.6.10  deployed on:  09:22AM (UTC) on September 01, 2025

The version of the OpenAPI document: v3
Contact: info@nelen-schuurmans.nl
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List, Optional, Set
from uuid import UUID

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing_extensions import Annotated, Self

from ..models.result import Result
from ..models.settings import Settings


class PostProcessingOverview(BaseModel):
    """
    PostProcessingOverview
    """  # noqa: E501

    username: Optional[StrictStr] = None
    external_user_id: Optional[StrictStr] = None
    metadata_version: Optional[StrictStr] = "1.2"
    start_time_sim: Optional[StrictStr] = None
    end_time_sim: Optional[StrictStr] = None
    results: Result
    settings: Settings
    model_name: Optional[StrictStr] = None
    simulation_name: Optional[StrictStr] = None
    scenario_name: Optional[Annotated[str, Field(min_length=1, strict=True)]] = Field(
        default=None, description="Scenario name for saving the results"
    )
    model_id: Optional[StrictInt] = None
    model_revision_id: Optional[StrictStr] = None
    email: Optional[StrictStr] = None
    result_uuid: Optional[UUID] = None
    organisation_uuid: Optional[StrictStr] = None
    simulation: Optional[StrictInt] = None
    __properties: ClassVar[List[str]] = [
        "username",
        "external_user_id",
        "metadata_version",
        "start_time_sim",
        "end_time_sim",
        "results",
        "settings",
        "model_name",
        "simulation_name",
        "scenario_name",
        "model_id",
        "model_revision_id",
        "email",
        "result_uuid",
        "organisation_uuid",
        "simulation",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PostProcessingOverview from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set(
            [
                "username",
                "external_user_id",
                "metadata_version",
                "start_time_sim",
                "end_time_sim",
                "model_name",
                "simulation_name",
                "scenario_name",
                "model_id",
                "model_revision_id",
                "email",
                "result_uuid",
                "organisation_uuid",
                "simulation",
            ]
        )

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of results
        if self.results:
            _dict["results"] = self.results.to_dict()
        # override the default output from pydantic by calling `to_dict()` of settings
        if self.settings:
            _dict["settings"] = self.settings.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PostProcessingOverview from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "username": obj.get("username"),
                "external_user_id": obj.get("external_user_id"),
                "metadata_version": obj.get("metadata_version")
                if obj.get("metadata_version") is not None
                else "1.2",
                "start_time_sim": obj.get("start_time_sim"),
                "end_time_sim": obj.get("end_time_sim"),
                "results": Result.from_dict(obj["results"])
                if obj.get("results") is not None
                else None,
                "settings": Settings.from_dict(obj["settings"])
                if obj.get("settings") is not None
                else None,
                "model_name": obj.get("model_name"),
                "simulation_name": obj.get("simulation_name"),
                "scenario_name": obj.get("scenario_name"),
                "model_id": obj.get("model_id"),
                "model_revision_id": obj.get("model_revision_id"),
                "email": obj.get("email"),
                "result_uuid": obj.get("result_uuid"),
                "organisation_uuid": obj.get("organisation_uuid"),
                "simulation": obj.get("simulation"),
            }
        )
        return _obj
