# coding: utf-8

"""
3Di API

3Di simulation API (latest stable version: v3)   Framework release: 3.4.71   3Di core release: 3.6.10  deployed on:  09:22AM (UTC) on September 01, 2025

The version of the OpenAPI document: v3
Contact: info@nelen-schuurmans.nl
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from datetime import datetime
from typing import Any, ClassVar, Dict, List, Optional, Set

from pydantic import (
    BaseModel,
    ConfigDict,
    Field,
    StrictBool,
    StrictInt,
    StrictStr,
    field_validator,
)
from typing_extensions import Annotated, Self

from ..models.revision_raster import RevisionRaster
from ..models.sqlite import Sqlite


class SchematisationRevision(BaseModel):
    """
    SchematisationRevision
    """  # noqa: E501

    url: Optional[StrictStr] = None
    id: Optional[StrictInt] = None
    created: Optional[datetime] = None
    schematisation: Optional[StrictStr] = None
    schematisation_id: Optional[StrictInt] = None
    number: Optional[StrictInt] = None
    sqlite: Optional[Sqlite] = None
    rasters: Optional[List[RevisionRaster]] = None
    archived: Optional[datetime] = None
    commit_date: Optional[datetime] = None
    commit_user: Optional[Annotated[str, Field(strict=True)]] = Field(
        default=None, description="The username of a user"
    )
    commit_first_name: Optional[StrictStr] = None
    commit_last_name: Optional[StrictStr] = None
    commit_message: Optional[Annotated[str, Field(min_length=1, strict=True)]] = None
    is_valid: Optional[StrictBool] = None
    has_threedimodel: Optional[StrictBool] = None
    tags: Optional[List[StrictStr]] = Field(
        default=None, description="tags provided as a list of strings"
    )
    __properties: ClassVar[List[str]] = [
        "url",
        "id",
        "created",
        "schematisation",
        "schematisation_id",
        "number",
        "sqlite",
        "rasters",
        "archived",
        "commit_date",
        "commit_user",
        "commit_first_name",
        "commit_last_name",
        "commit_message",
        "is_valid",
        "has_threedimodel",
        "tags",
    ]

    @field_validator("commit_user")
    def commit_user_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^[\w.@+-]+$", value):
            raise ValueError(r"must validate the regular expression /^[\w.@+-]+$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SchematisationRevision from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set(
            [
                "url",
                "id",
                "created",
                "schematisation",
                "schematisation_id",
                "number",
                "rasters",
                "archived",
                "commit_date",
                "commit_user",
                "commit_first_name",
                "commit_last_name",
                "commit_message",
                "is_valid",
                "has_threedimodel",
            ]
        )

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of sqlite
        if self.sqlite:
            _dict["sqlite"] = self.sqlite.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in rasters (list)
        _items = []
        if self.rasters:
            for _item_rasters in self.rasters:
                if _item_rasters:
                    _items.append(_item_rasters.to_dict())
            _dict["rasters"] = _items
        # set to None if created (nullable) is None
        # and model_fields_set contains the field
        if self.created is None and "created" in self.model_fields_set:
            _dict["created"] = None

        # set to None if archived (nullable) is None
        # and model_fields_set contains the field
        if self.archived is None and "archived" in self.model_fields_set:
            _dict["archived"] = None

        # set to None if commit_date (nullable) is None
        # and model_fields_set contains the field
        if self.commit_date is None and "commit_date" in self.model_fields_set:
            _dict["commit_date"] = None

        # set to None if commit_message (nullable) is None
        # and model_fields_set contains the field
        if self.commit_message is None and "commit_message" in self.model_fields_set:
            _dict["commit_message"] = None

        # set to None if is_valid (nullable) is None
        # and model_fields_set contains the field
        if self.is_valid is None and "is_valid" in self.model_fields_set:
            _dict["is_valid"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SchematisationRevision from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "url": obj.get("url"),
                "id": obj.get("id"),
                "created": obj.get("created"),
                "schematisation": obj.get("schematisation"),
                "schematisation_id": obj.get("schematisation_id"),
                "number": obj.get("number"),
                "sqlite": Sqlite.from_dict(obj["sqlite"])
                if obj.get("sqlite") is not None
                else None,
                "rasters": [RevisionRaster.from_dict(_item) for _item in obj["rasters"]]
                if obj.get("rasters") is not None
                else None,
                "archived": obj.get("archived"),
                "commit_date": obj.get("commit_date"),
                "commit_user": obj.get("commit_user"),
                "commit_first_name": obj.get("commit_first_name"),
                "commit_last_name": obj.get("commit_last_name"),
                "commit_message": obj.get("commit_message"),
                "is_valid": obj.get("is_valid"),
                "has_threedimodel": obj.get("has_threedimodel"),
                "tags": obj.get("tags"),
            }
        )
        return _obj
