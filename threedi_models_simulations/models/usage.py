# coding: utf-8

"""
3Di API

3Di simulation API (latest stable version: v3)   Framework release: 3.4.71   3Di core release: 3.6.10  deployed on:  09:22AM (UTC) on September 01, 2025

The version of the OpenAPI document: v3
Contact: info@nelen-schuurmans.nl
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from datetime import datetime
from typing import Any, ClassVar, Dict, List, Optional, Set

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing_extensions import Annotated, Self

from ..models.simulation import Simulation


class Usage(BaseModel):
    """
    Usage
    """  # noqa: E501

    id: Optional[StrictInt] = None
    simulation: Optional[Simulation] = None
    started: Optional[datetime] = None
    finished: Optional[datetime] = None
    total_time: Optional[Annotated[int, Field(le=2147483647, strict=True, ge=0)]] = None
    status: Optional[StrictStr] = None
    simulation_type: Optional[StrictStr] = None
    user_name: Optional[StrictStr] = None
    organisation_uuid: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = [
        "id",
        "simulation",
        "started",
        "finished",
        "total_time",
        "status",
        "simulation_type",
        "user_name",
        "organisation_uuid",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Usage from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set(
            [
                "id",
                "status",
                "simulation_type",
                "user_name",
                "organisation_uuid",
            ]
        )

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of simulation
        if self.simulation:
            _dict["simulation"] = self.simulation.to_dict()
        # set to None if started (nullable) is None
        # and model_fields_set contains the field
        if self.started is None and "started" in self.model_fields_set:
            _dict["started"] = None

        # set to None if finished (nullable) is None
        # and model_fields_set contains the field
        if self.finished is None and "finished" in self.model_fields_set:
            _dict["finished"] = None

        # set to None if total_time (nullable) is None
        # and model_fields_set contains the field
        if self.total_time is None and "total_time" in self.model_fields_set:
            _dict["total_time"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Usage from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "id": obj.get("id"),
                "simulation": Simulation.from_dict(obj["simulation"])
                if obj.get("simulation") is not None
                else None,
                "started": obj.get("started"),
                "finished": obj.get("finished"),
                "total_time": obj.get("total_time"),
                "status": obj.get("status"),
                "simulation_type": obj.get("simulation_type"),
                "user_name": obj.get("user_name"),
                "organisation_uuid": obj.get("organisation_uuid"),
            }
        )
        return _obj
