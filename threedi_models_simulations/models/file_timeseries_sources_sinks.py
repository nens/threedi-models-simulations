# coding: utf-8

"""
3Di API

3Di simulation API (latest stable version: v3)   Framework release: 3.4.71   3Di core release: 3.6.10  deployed on:  09:22AM (UTC) on September 01, 2025

The version of the OpenAPI document: v3
Contact: info@nelen-schuurmans.nl
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List, Optional, Set, Union
from uuid import UUID

from pydantic import (
    BaseModel,
    ConfigDict,
    Field,
    StrictFloat,
    StrictInt,
    StrictStr,
    field_validator,
)
from typing_extensions import Annotated, Self

from ..models.file_read_only import FileReadOnly
from ..models.forcing_substance import ForcingSubstance


class FileTimeseriesSourcesSinks(BaseModel):
    """
    FileTimeseriesSourcesSinks
    """  # noqa: E501

    url: Optional[StrictStr] = None
    multiplier: Optional[Union[StrictFloat, StrictInt]] = None
    simulation: Optional[StrictStr] = None
    offset: Optional[
        Annotated[int, Field(le=2147483647, strict=True, ge=-2147483648)]
    ] = Field(default=None, description="offset of event in simulation in seconds")
    duration: Optional[
        Annotated[int, Field(le=2147483647, strict=True, ge=-2147483648)]
    ] = Field(default=None, description="Duration of event in seconds")
    timestamps: Optional[
        List[Annotated[int, Field(le=2147483647, strict=True, ge=0)]]
    ] = Field(default=None, description="in simulation in seconds")
    interval: Optional[Annotated[int, Field(le=2147483647, strict=True, ge=0)]] = Field(
        default=None, description="interval in seconds"
    )
    values_reference: Optional[Annotated[str, Field(strict=True, max_length=255)]] = (
        None
    )
    fill_value: Optional[
        Annotated[str, Field(min_length=1, strict=True, max_length=128)]
    ] = None
    type: Optional[StrictStr] = None
    units: StrictStr
    file: Optional[FileReadOnly] = None
    uid: Optional[UUID] = None
    id: Optional[StrictInt] = None
    substances: Optional[List[ForcingSubstance]] = None
    __properties: ClassVar[List[str]] = [
        "url",
        "multiplier",
        "simulation",
        "offset",
        "duration",
        "timestamps",
        "interval",
        "values_reference",
        "fill_value",
        "type",
        "units",
        "file",
        "uid",
        "id",
        "substances",
    ]

    @field_validator("type")
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(["netcdf4"]):
            raise ValueError("must be one of enum values ('netcdf4')")
        return value

    @field_validator("units")
    def units_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(["mm", "mm/h"]):
            raise ValueError("must be one of enum values ('mm', 'mm/h')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of FileTimeseriesSourcesSinks from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set(
            [
                "url",
                "simulation",
                "type",
                "uid",
                "id",
            ]
        )

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of file
        if self.file:
            _dict["file"] = self.file.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in substances (list)
        _items = []
        if self.substances:
            for _item_substances in self.substances:
                if _item_substances:
                    _items.append(_item_substances.to_dict())
            _dict["substances"] = _items
        # set to None if offset (nullable) is None
        # and model_fields_set contains the field
        if self.offset is None and "offset" in self.model_fields_set:
            _dict["offset"] = None

        # set to None if duration (nullable) is None
        # and model_fields_set contains the field
        if self.duration is None and "duration" in self.model_fields_set:
            _dict["duration"] = None

        # set to None if timestamps (nullable) is None
        # and model_fields_set contains the field
        if self.timestamps is None and "timestamps" in self.model_fields_set:
            _dict["timestamps"] = None

        # set to None if interval (nullable) is None
        # and model_fields_set contains the field
        if self.interval is None and "interval" in self.model_fields_set:
            _dict["interval"] = None

        # set to None if values_reference (nullable) is None
        # and model_fields_set contains the field
        if (
            self.values_reference is None
            and "values_reference" in self.model_fields_set
        ):
            _dict["values_reference"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of FileTimeseriesSourcesSinks from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "url": obj.get("url"),
                "multiplier": obj.get("multiplier"),
                "simulation": obj.get("simulation"),
                "offset": obj.get("offset"),
                "duration": obj.get("duration"),
                "timestamps": obj.get("timestamps"),
                "interval": obj.get("interval"),
                "values_reference": obj.get("values_reference"),
                "fill_value": obj.get("fill_value"),
                "type": obj.get("type"),
                "units": obj.get("units"),
                "file": FileReadOnly.from_dict(obj["file"])
                if obj.get("file") is not None
                else None,
                "uid": obj.get("uid"),
                "id": obj.get("id"),
                "substances": [
                    ForcingSubstance.from_dict(_item) for _item in obj["substances"]
                ]
                if obj.get("substances") is not None
                else None,
            }
        )
        return _obj
