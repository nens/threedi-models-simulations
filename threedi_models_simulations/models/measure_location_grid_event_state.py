# coding: utf-8

"""
3Di API

3Di simulation API (latest stable version: v3)   Framework release: 3.4.71   3Di core release: 3.6.10  deployed on:  09:22AM (UTC) on September 01, 2025

The version of the OpenAPI document: v3
Contact: info@nelen-schuurmans.nl
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List, Optional, Set

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing_extensions import Annotated, Self


class MeasureLocationGridEventState(BaseModel):
    """
    MeasureLocationGridEventState
    """  # noqa: E501

    state: StrictStr
    state_detail: Dict[str, Any]
    grid_id: Optional[StrictInt] = None
    location_grid_ids: Optional[List[Optional[StrictInt]]] = None
    location_resource_ids: Optional[List[Optional[StrictInt]]] = None
    location_resource_states: Optional[
        List[Optional[Annotated[str, Field(min_length=1, strict=True)]]]
    ] = None
    location_resource_state_details: Optional[List[Optional[Dict[str, Any]]]] = None
    __properties: ClassVar[List[str]] = [
        "state",
        "state_detail",
        "grid_id",
        "location_grid_ids",
        "location_resource_ids",
        "location_resource_states",
        "location_resource_state_details",
    ]

    @field_validator("state")
    def state_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(["processing", "valid", "invalid"]):
            raise ValueError(
                "must be one of enum values ('processing', 'valid', 'invalid')"
            )
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MeasureLocationGridEventState from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if grid_id (nullable) is None
        # and model_fields_set contains the field
        if self.grid_id is None and "grid_id" in self.model_fields_set:
            _dict["grid_id"] = None

        # set to None if location_grid_ids (nullable) is None
        # and model_fields_set contains the field
        if (
            self.location_grid_ids is None
            and "location_grid_ids" in self.model_fields_set
        ):
            _dict["location_grid_ids"] = None

        # set to None if location_resource_ids (nullable) is None
        # and model_fields_set contains the field
        if (
            self.location_resource_ids is None
            and "location_resource_ids" in self.model_fields_set
        ):
            _dict["location_resource_ids"] = None

        # set to None if location_resource_states (nullable) is None
        # and model_fields_set contains the field
        if (
            self.location_resource_states is None
            and "location_resource_states" in self.model_fields_set
        ):
            _dict["location_resource_states"] = None

        # set to None if location_resource_state_details (nullable) is None
        # and model_fields_set contains the field
        if (
            self.location_resource_state_details is None
            and "location_resource_state_details" in self.model_fields_set
        ):
            _dict["location_resource_state_details"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MeasureLocationGridEventState from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "state": obj.get("state"),
                "state_detail": obj.get("state_detail"),
                "grid_id": obj.get("grid_id"),
                "location_grid_ids": obj.get("location_grid_ids"),
                "location_resource_ids": obj.get("location_resource_ids"),
                "location_resource_states": obj.get("location_resource_states"),
                "location_resource_state_details": obj.get(
                    "location_resource_state_details"
                ),
            }
        )
        return _obj
