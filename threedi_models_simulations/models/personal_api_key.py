# coding: utf-8

"""
3Di API

3Di simulation API (latest stable version: v3)   Framework release: 3.4.71   3Di core release: 3.6.10  deployed on:  09:22AM (UTC) on September 01, 2025

The version of the OpenAPI document: v3
Contact: info@nelen-schuurmans.nl
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from datetime import date, datetime
from typing import Any, ClassVar, Dict, List, Optional, Set

from pydantic import BaseModel, ConfigDict, Field, StrictBool
from typing_extensions import Annotated, Self


class PersonalAPIKey(BaseModel):
    """
    PersonalAPIKey
    """  # noqa: E501

    prefix: Optional[Annotated[str, Field(min_length=1, strict=True)]] = None
    scope: Annotated[str, Field(min_length=1, strict=True)] = Field(
        description="A space-separated list of scopes (options: basic simulate create lizardrain lizardprocess manageusers managecontracts test livesite waterquality). Alternatively, use '*:readwrite' for all scopes."
    )
    name: Annotated[str, Field(min_length=1, strict=True, max_length=50)] = Field(
        description="A free-form name for the API key. Need not be unique. 50 characters max."
    )
    expiry_date: Optional[datetime] = Field(
        default=None, description="Once API key expires, clients cannot use it anymore."
    )
    created: Optional[datetime] = None
    revoked: Optional[StrictBool] = Field(
        default=None,
        description="If the API key is revoked, clients cannot use it anymore. (This cannot be undone.)",
    )
    last_used: Optional[date] = Field(
        default=None, description="Last time the API key was used."
    )
    __properties: ClassVar[List[str]] = [
        "prefix",
        "scope",
        "name",
        "expiry_date",
        "created",
        "revoked",
        "last_used",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PersonalAPIKey from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set(
            [
                "prefix",
                "created",
                "last_used",
            ]
        )

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if expiry_date (nullable) is None
        # and model_fields_set contains the field
        if self.expiry_date is None and "expiry_date" in self.model_fields_set:
            _dict["expiry_date"] = None

        # set to None if last_used (nullable) is None
        # and model_fields_set contains the field
        if self.last_used is None and "last_used" in self.model_fields_set:
            _dict["last_used"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PersonalAPIKey from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "prefix": obj.get("prefix"),
                "scope": obj.get("scope"),
                "name": obj.get("name"),
                "expiry_date": obj.get("expiry_date"),
                "created": obj.get("created"),
                "revoked": obj.get("revoked"),
                "last_used": obj.get("last_used"),
            }
        )
        return _obj
