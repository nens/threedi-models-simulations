# coding: utf-8

"""
3Di API

3Di simulation API (latest stable version: v3)   Framework release: 3.4.71   3Di core release: 3.6.10  deployed on:  09:22AM (UTC) on September 01, 2025

The version of the OpenAPI document: v3
Contact: info@nelen-schuurmans.nl
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from datetime import datetime
from typing import Any, ClassVar, Dict, List, Optional, Set, Union

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt
from typing_extensions import Annotated, Self


class UsageStatistics(BaseModel):
    """
    UsageStatistics
    """  # noqa: E501

    total_sessions: StrictInt
    total_duration: StrictInt
    avg_duration: Union[StrictFloat, StrictInt]
    min_duration: StrictInt
    max_duration: StrictInt
    duration_humanized: Annotated[str, Field(min_length=1, strict=True)]
    min_started: Optional[datetime]
    max_started: Optional[datetime]
    __properties: ClassVar[List[str]] = [
        "total_sessions",
        "total_duration",
        "avg_duration",
        "min_duration",
        "max_duration",
        "duration_humanized",
        "min_started",
        "max_started",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UsageStatistics from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if min_started (nullable) is None
        # and model_fields_set contains the field
        if self.min_started is None and "min_started" in self.model_fields_set:
            _dict["min_started"] = None

        # set to None if max_started (nullable) is None
        # and model_fields_set contains the field
        if self.max_started is None and "max_started" in self.model_fields_set:
            _dict["max_started"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UsageStatistics from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "total_sessions": obj.get("total_sessions"),
                "total_duration": obj.get("total_duration"),
                "avg_duration": obj.get("avg_duration"),
                "min_duration": obj.get("min_duration"),
                "max_duration": obj.get("max_duration"),
                "duration_humanized": obj.get("duration_humanized"),
                "min_started": obj.get("min_started"),
                "max_started": obj.get("max_started"),
            }
        )
        return _obj
