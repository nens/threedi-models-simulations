# coding: utf-8

"""
3Di API

3Di simulation API (latest stable version: v3)   Framework release: 3.4.71   3Di core release: 3.6.10  deployed on:  09:22AM (UTC) on September 01, 2025

The version of the OpenAPI document: v3
Contact: info@nelen-schuurmans.nl
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from datetime import datetime
from typing import Any, ClassVar, Dict, List, Optional, Set

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing_extensions import Annotated, Self


class Commit(BaseModel):
    """
    Commit
    """  # noqa: E501

    commit_message: Optional[Annotated[str, Field(min_length=1, strict=True)]] = None
    force_as: Optional[StrictStr] = None
    schematisation_name: Optional[
        Annotated[str, Field(min_length=1, strict=True, max_length=256)]
    ] = None
    commit_date: Optional[datetime] = Field(
        default=None,
        description="The datetime of the commit (only superusers can modify)",
    )
    commit_user: Optional[Annotated[str, Field(strict=True)]] = Field(
        default=None, description="The username of a user"
    )
    user: Optional[Annotated[str, Field(strict=True, max_length=128)]] = Field(
        default=None,
        description="User that committed the revision on models.lizard.net (only superusers can modify)",
    )
    tags: Optional[List[StrictStr]] = Field(
        default=None, description="tags provided as a list of strings"
    )
    __properties: ClassVar[List[str]] = [
        "commit_message",
        "force_as",
        "schematisation_name",
        "commit_date",
        "commit_user",
        "user",
        "tags",
    ]

    @field_validator("force_as")
    def force_as_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(["default", "new_revision", "new_schematisation"]):
            raise ValueError(
                "must be one of enum values ('default', 'new_revision', 'new_schematisation')"
            )
        return value

    @field_validator("commit_user")
    def commit_user_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^[\w.@+-]+$", value):
            raise ValueError(r"must validate the regular expression /^[\w.@+-]+$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Commit from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if commit_message (nullable) is None
        # and model_fields_set contains the field
        if self.commit_message is None and "commit_message" in self.model_fields_set:
            _dict["commit_message"] = None

        # set to None if commit_date (nullable) is None
        # and model_fields_set contains the field
        if self.commit_date is None and "commit_date" in self.model_fields_set:
            _dict["commit_date"] = None

        # set to None if user (nullable) is None
        # and model_fields_set contains the field
        if self.user is None and "user" in self.model_fields_set:
            _dict["user"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Commit from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "commit_message": obj.get("commit_message"),
                "force_as": obj.get("force_as"),
                "schematisation_name": obj.get("schematisation_name"),
                "commit_date": obj.get("commit_date"),
                "commit_user": obj.get("commit_user"),
                "user": obj.get("user"),
                "tags": obj.get("tags"),
            }
        )
        return _obj
