# coding: utf-8

"""
3Di API

3Di simulation API (latest stable version: v3)   Framework release: 3.4.71   3Di core release: 3.6.10  deployed on:  09:22AM (UTC) on September 01, 2025

The version of the OpenAPI document: v3
Contact: info@nelen-schuurmans.nl
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List, Optional, Set, Union
from uuid import UUID

from pydantic import (
    BaseModel,
    ConfigDict,
    Field,
    StrictBool,
    StrictFloat,
    StrictInt,
    StrictStr,
)
from typing_extensions import Annotated, Self

from ..models.polygon import Polygon


class RasterEdit(BaseModel):
    """
    RasterEdit
    """  # noqa: E501

    url: Optional[StrictStr] = None
    simulation: Optional[StrictStr] = None
    raster: StrictStr
    offset: Annotated[int, Field(le=2147483647, strict=True, ge=0)] = Field(
        description="offset of event in simulation in seconds"
    )
    value: Union[StrictFloat, StrictInt] = Field(
        description="Absolute or relative height (in meters)  to use for the polygon"
    )
    polygon: Polygon
    relative: Optional[StrictBool] = Field(
        default=None,
        description="Process the value as a relative height, default is absolute",
    )
    uid: Optional[UUID] = None
    id: Optional[StrictInt] = None
    __properties: ClassVar[List[str]] = [
        "url",
        "simulation",
        "raster",
        "offset",
        "value",
        "polygon",
        "relative",
        "uid",
        "id",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RasterEdit from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set(
            [
                "url",
                "simulation",
                "uid",
                "id",
            ]
        )

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of polygon
        if self.polygon:
            _dict["polygon"] = self.polygon.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RasterEdit from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "url": obj.get("url"),
                "simulation": obj.get("simulation"),
                "raster": obj.get("raster"),
                "offset": obj.get("offset"),
                "value": obj.get("value"),
                "polygon": Polygon.from_dict(obj["polygon"])
                if obj.get("polygon") is not None
                else None,
                "relative": obj.get("relative"),
                "uid": obj.get("uid"),
                "id": obj.get("id"),
            }
        )
        return _obj
