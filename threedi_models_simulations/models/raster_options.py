# coding: utf-8

"""
3Di API

3Di simulation API (latest stable version: v3)   Framework release: 3.4.71   3Di core release: 3.6.10  deployed on:  09:22AM (UTC) on September 01, 2025

The version of the OpenAPI document: v3
Contact: info@nelen-schuurmans.nl
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List, Optional, Set

from pydantic import BaseModel, ConfigDict, Field
from typing_extensions import Annotated, Self


class RasterOptions(BaseModel):
    """
    RasterOptions
    """  # noqa: E501

    dem_file: Optional[
        Annotated[str, Field(min_length=1, strict=True, max_length=80)]
    ] = None
    dem_raw_file: Optional[
        Annotated[str, Field(min_length=1, strict=True, max_length=80)]
    ] = None
    equilibrium_infiltration_rate_file: Optional[
        Annotated[str, Field(min_length=1, strict=True, max_length=80)]
    ] = None
    frict_coef_file: Optional[
        Annotated[str, Field(min_length=1, strict=True, max_length=80)]
    ] = None
    initial_groundwater_level_file: Optional[
        Annotated[str, Field(min_length=1, strict=True, max_length=80)]
    ] = None
    initial_waterlevel_file: Optional[
        Annotated[str, Field(min_length=1, strict=True, max_length=80)]
    ] = None
    groundwater_hydro_connectivity_file: Optional[
        Annotated[str, Field(min_length=1, strict=True, max_length=80)]
    ] = None
    groundwater_impervious_layer_level_file: Optional[
        Annotated[str, Field(min_length=1, strict=True, max_length=80)]
    ] = None
    infiltration_decay_period_file: Optional[
        Annotated[str, Field(min_length=1, strict=True, max_length=80)]
    ] = None
    initial_infiltration_rate_file: Optional[
        Annotated[str, Field(min_length=1, strict=True, max_length=80)]
    ] = None
    leakage_file: Optional[
        Annotated[str, Field(min_length=1, strict=True, max_length=80)]
    ] = None
    phreatic_storage_capacity_file: Optional[
        Annotated[str, Field(min_length=1, strict=True, max_length=80)]
    ] = None
    hydraulic_conductivity_file: Optional[
        Annotated[str, Field(min_length=1, strict=True, max_length=80)]
    ] = None
    porosity_file: Optional[
        Annotated[str, Field(min_length=1, strict=True, max_length=80)]
    ] = None
    infiltration_rate_file: Optional[
        Annotated[str, Field(min_length=1, strict=True, max_length=80)]
    ] = None
    max_infiltration_capacity_file: Optional[
        Annotated[str, Field(min_length=1, strict=True, max_length=80)]
    ] = None
    interception_file: Optional[
        Annotated[str, Field(min_length=1, strict=True, max_length=80)]
    ] = None
    vegetation_height_file: Optional[
        Annotated[str, Field(min_length=1, strict=True, max_length=80)]
    ] = None
    vegetation_drag_coefficient_file: Optional[
        Annotated[str, Field(min_length=1, strict=True, max_length=80)]
    ] = None
    vegetation_stem_count_file: Optional[
        Annotated[str, Field(min_length=1, strict=True, max_length=80)]
    ] = None
    vegetation_stem_diameter_file: Optional[
        Annotated[str, Field(min_length=1, strict=True, max_length=80)]
    ] = None
    initial_concentration_file: Optional[
        Annotated[str, Field(min_length=1, strict=True, max_length=80)]
    ] = None
    initial_groundwater_concentration_file: Optional[
        Annotated[str, Field(min_length=1, strict=True, max_length=80)]
    ] = None
    __properties: ClassVar[List[str]] = [
        "dem_file",
        "dem_raw_file",
        "equilibrium_infiltration_rate_file",
        "frict_coef_file",
        "initial_groundwater_level_file",
        "initial_waterlevel_file",
        "groundwater_hydro_connectivity_file",
        "groundwater_impervious_layer_level_file",
        "infiltration_decay_period_file",
        "initial_infiltration_rate_file",
        "leakage_file",
        "phreatic_storage_capacity_file",
        "hydraulic_conductivity_file",
        "porosity_file",
        "infiltration_rate_file",
        "max_infiltration_capacity_file",
        "interception_file",
        "vegetation_height_file",
        "vegetation_drag_coefficient_file",
        "vegetation_stem_count_file",
        "vegetation_stem_diameter_file",
        "initial_concentration_file",
        "initial_groundwater_concentration_file",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RasterOptions from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RasterOptions from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "dem_file": obj.get("dem_file"),
                "dem_raw_file": obj.get("dem_raw_file"),
                "equilibrium_infiltration_rate_file": obj.get(
                    "equilibrium_infiltration_rate_file"
                ),
                "frict_coef_file": obj.get("frict_coef_file"),
                "initial_groundwater_level_file": obj.get(
                    "initial_groundwater_level_file"
                ),
                "initial_waterlevel_file": obj.get("initial_waterlevel_file"),
                "groundwater_hydro_connectivity_file": obj.get(
                    "groundwater_hydro_connectivity_file"
                ),
                "groundwater_impervious_layer_level_file": obj.get(
                    "groundwater_impervious_layer_level_file"
                ),
                "infiltration_decay_period_file": obj.get(
                    "infiltration_decay_period_file"
                ),
                "initial_infiltration_rate_file": obj.get(
                    "initial_infiltration_rate_file"
                ),
                "leakage_file": obj.get("leakage_file"),
                "phreatic_storage_capacity_file": obj.get(
                    "phreatic_storage_capacity_file"
                ),
                "hydraulic_conductivity_file": obj.get("hydraulic_conductivity_file"),
                "porosity_file": obj.get("porosity_file"),
                "infiltration_rate_file": obj.get("infiltration_rate_file"),
                "max_infiltration_capacity_file": obj.get(
                    "max_infiltration_capacity_file"
                ),
                "interception_file": obj.get("interception_file"),
                "vegetation_height_file": obj.get("vegetation_height_file"),
                "vegetation_drag_coefficient_file": obj.get(
                    "vegetation_drag_coefficient_file"
                ),
                "vegetation_stem_count_file": obj.get("vegetation_stem_count_file"),
                "vegetation_stem_diameter_file": obj.get(
                    "vegetation_stem_diameter_file"
                ),
                "initial_concentration_file": obj.get("initial_concentration_file"),
                "initial_groundwater_concentration_file": obj.get(
                    "initial_groundwater_concentration_file"
                ),
            }
        )
        return _obj
