# coding: utf-8

"""
3Di API

3Di simulation API (latest stable version: v3)   Framework release: 3.4.71   3Di core release: 3.6.10  deployed on:  09:22AM (UTC) on September 01, 2025

The version of the OpenAPI document: v3
Contact: info@nelen-schuurmans.nl
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from datetime import date
from typing import Any, ClassVar, Dict, List, Optional, Set, Union
from uuid import UUID

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing_extensions import Annotated, Self


class Contract(BaseModel):
    """
    Contract
    """  # noqa: E501

    url: Optional[StrictStr] = None
    id: Optional[StrictInt] = None
    organisation: StrictStr = Field(description="The unique_id of an organisation")
    organisation_name: Optional[StrictStr] = None
    scope: Optional[Annotated[str, Field(min_length=1, strict=True)]] = Field(
        default=None,
        description="A space-separated list of scopes (options: basic simulate create lizardrain lizardprocess manageusers managecontracts test livesite waterquality)",
    )
    start_date: Optional[date] = None
    hours_bought: StrictInt
    hours_used: Optional[Union[StrictFloat, StrictInt]] = None
    session_limit: Annotated[int, Field(le=2147483647, strict=True, ge=-2147483648)]
    current_sessions: Optional[StrictStr] = None
    threedimodel_limit: Optional[Annotated[int, Field(le=32767, strict=True, ge=0)]] = (
        Field(
            default=None, description="Maximum amount of ThreediModels per Organisation"
        )
    )
    created_by: StrictStr = Field(description="The unique_id of an organisation")
    lizard_post_processing_organisation_unique_id: Optional[UUID] = None
    __properties: ClassVar[List[str]] = [
        "url",
        "id",
        "organisation",
        "organisation_name",
        "scope",
        "start_date",
        "hours_bought",
        "hours_used",
        "session_limit",
        "current_sessions",
        "threedimodel_limit",
        "created_by",
        "lizard_post_processing_organisation_unique_id",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Contract from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set(
            [
                "url",
                "id",
                "organisation_name",
                "scope",
                "hours_used",
                "current_sessions",
            ]
        )

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if start_date (nullable) is None
        # and model_fields_set contains the field
        if self.start_date is None and "start_date" in self.model_fields_set:
            _dict["start_date"] = None

        # set to None if lizard_post_processing_organisation_unique_id (nullable) is None
        # and model_fields_set contains the field
        if (
            self.lizard_post_processing_organisation_unique_id is None
            and "lizard_post_processing_organisation_unique_id" in self.model_fields_set
        ):
            _dict["lizard_post_processing_organisation_unique_id"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Contract from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "url": obj.get("url"),
                "id": obj.get("id"),
                "organisation": obj.get("organisation"),
                "organisation_name": obj.get("organisation_name"),
                "scope": obj.get("scope"),
                "start_date": obj.get("start_date"),
                "hours_bought": obj.get("hours_bought"),
                "hours_used": obj.get("hours_used"),
                "session_limit": obj.get("session_limit"),
                "current_sessions": obj.get("current_sessions"),
                "threedimodel_limit": obj.get("threedimodel_limit"),
                "created_by": obj.get("created_by"),
                "lizard_post_processing_organisation_unique_id": obj.get(
                    "lizard_post_processing_organisation_unique_id"
                ),
            }
        )
        return _obj
