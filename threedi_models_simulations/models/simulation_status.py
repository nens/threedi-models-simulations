# coding: utf-8

"""
3Di API

3Di simulation API (latest stable version: v3)   Framework release: 3.4.71   3Di core release: 3.6.10  deployed on:  09:22AM (UTC) on September 01, 2025

The version of the OpenAPI document: v3
Contact: info@nelen-schuurmans.nl
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from datetime import datetime
from typing import Any, ClassVar, Dict, List, Optional, Set

from pydantic import (
    BaseModel,
    ConfigDict,
    Field,
    StrictBool,
    StrictInt,
    StrictStr,
    field_validator,
)
from typing_extensions import Annotated, Self


class SimulationStatus(BaseModel):
    """
    SimulationStatus
    """  # noqa: E501

    url: Optional[StrictStr] = None
    name: StrictStr
    simulation: Optional[StrictStr] = None
    simulation_id: Optional[StrictInt] = None
    simulation_name: Optional[StrictStr] = None
    simulation_user_email: Optional[StrictStr] = None
    simulation_organisation_unique_id: Optional[StrictStr] = None
    simulation_tags: Optional[List[Optional[StrictStr]]] = None
    simulation_user_first_name: Optional[StrictStr] = None
    simulation_user_last_name: Optional[StrictStr] = None
    threedimodel_slug: Optional[StrictStr] = None
    threedimodel_id: Optional[StrictInt] = None
    has_results: Optional[StrictBool] = None
    created: Optional[datetime] = None
    expiry: Optional[datetime] = None
    time: Optional[Annotated[int, Field(le=2147483647, strict=True, ge=0)]] = Field(
        default=None, description="simulation time in seconds"
    )
    paused: Optional[StrictBool] = None
    detail: Optional[Dict[str, Any]] = None
    exit_code: Optional[StrictInt] = Field(
        default=None,
        description="only available for final statuses like 'finished' or 'crashed'. Gives detailed insight to the application state when the simulation finished",
    )
    id: Optional[StrictInt] = None
    __properties: ClassVar[List[str]] = [
        "url",
        "name",
        "simulation",
        "simulation_id",
        "simulation_name",
        "simulation_user_email",
        "simulation_organisation_unique_id",
        "simulation_tags",
        "simulation_user_first_name",
        "simulation_user_last_name",
        "threedimodel_slug",
        "threedimodel_id",
        "has_results",
        "created",
        "expiry",
        "time",
        "paused",
        "detail",
        "exit_code",
        "id",
    ]

    @field_validator("name")
    def name_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(
            [
                "created",
                "starting",
                "initialized",
                "queued",
                "ended",
                "postprocessing",
                "finished",
                "crashed",
            ]
        ):
            raise ValueError(
                "must be one of enum values ('created', 'starting', 'initialized', 'queued', 'ended', 'postprocessing', 'finished', 'crashed')"
            )
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SimulationStatus from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set(
            [
                "url",
                "simulation",
                "simulation_id",
                "simulation_name",
                "simulation_user_email",
                "simulation_organisation_unique_id",
                "simulation_tags",
                "simulation_user_first_name",
                "simulation_user_last_name",
                "threedimodel_slug",
                "threedimodel_id",
                "has_results",
                "created",
                "expiry",
                "id",
            ]
        )

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if simulation_user_email (nullable) is None
        # and model_fields_set contains the field
        if (
            self.simulation_user_email is None
            and "simulation_user_email" in self.model_fields_set
        ):
            _dict["simulation_user_email"] = None

        # set to None if expiry (nullable) is None
        # and model_fields_set contains the field
        if self.expiry is None and "expiry" in self.model_fields_set:
            _dict["expiry"] = None

        # set to None if time (nullable) is None
        # and model_fields_set contains the field
        if self.time is None and "time" in self.model_fields_set:
            _dict["time"] = None

        # set to None if paused (nullable) is None
        # and model_fields_set contains the field
        if self.paused is None and "paused" in self.model_fields_set:
            _dict["paused"] = None

        # set to None if detail (nullable) is None
        # and model_fields_set contains the field
        if self.detail is None and "detail" in self.model_fields_set:
            _dict["detail"] = None

        # set to None if exit_code (nullable) is None
        # and model_fields_set contains the field
        if self.exit_code is None and "exit_code" in self.model_fields_set:
            _dict["exit_code"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SimulationStatus from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "url": obj.get("url"),
                "name": obj.get("name"),
                "simulation": obj.get("simulation"),
                "simulation_id": obj.get("simulation_id"),
                "simulation_name": obj.get("simulation_name"),
                "simulation_user_email": obj.get("simulation_user_email"),
                "simulation_organisation_unique_id": obj.get(
                    "simulation_organisation_unique_id"
                ),
                "simulation_tags": obj.get("simulation_tags"),
                "simulation_user_first_name": obj.get("simulation_user_first_name"),
                "simulation_user_last_name": obj.get("simulation_user_last_name"),
                "threedimodel_slug": obj.get("threedimodel_slug"),
                "threedimodel_id": obj.get("threedimodel_id"),
                "has_results": obj.get("has_results"),
                "created": obj.get("created"),
                "expiry": obj.get("expiry"),
                "time": obj.get("time"),
                "paused": obj.get("paused"),
                "detail": obj.get("detail"),
                "exit_code": obj.get("exit_code"),
                "id": obj.get("id"),
            }
        )
        return _obj
