# coding: utf-8

"""
3Di API

3Di simulation API (latest stable version: v3)   Framework release: 3.4.71   3Di core release: 3.6.10  deployed on:  09:22AM (UTC) on September 01, 2025

The version of the OpenAPI document: v3
Contact: info@nelen-schuurmans.nl
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from datetime import datetime
from typing import Any, ClassVar, Dict, List, Optional, Set
from uuid import UUID

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing_extensions import Annotated, Self

from ..models.file_read_only import FileReadOnly


class TimedSavedStateUpdate(BaseModel):
    """
    TimedSavedStateUpdate
    """  # noqa: E501

    url: Optional[StrictStr] = None
    name: Optional[Annotated[str, Field(min_length=1, strict=True, max_length=80)]] = (
        None
    )
    simulation: Optional[StrictStr] = None
    created: Optional[datetime] = None
    created_time: Optional[Annotated[int, Field(le=2147483647, strict=True, ge=0)]] = (
        Field(
            default=None,
            description="Time in simulation the savedstate has been created",
        )
    )
    tags: Optional[List[StrictStr]] = Field(
        default=None, description="tags provided as a list of strings"
    )
    expiry: Optional[datetime] = None
    time: Optional[Annotated[int, Field(le=2147483647, strict=True, ge=0)]] = Field(
        description="Time in simulation to create savedstate"
    )
    file: Optional[FileReadOnly] = None
    id: Optional[StrictInt] = None
    uuid: Optional[UUID] = None
    __properties: ClassVar[List[str]] = [
        "url",
        "name",
        "simulation",
        "created",
        "created_time",
        "tags",
        "expiry",
        "time",
        "file",
        "id",
        "uuid",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TimedSavedStateUpdate from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set(
            [
                "url",
                "simulation",
                "id",
            ]
        )

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of file
        if self.file:
            _dict["file"] = self.file.to_dict()
        # set to None if simulation (nullable) is None
        # and model_fields_set contains the field
        if self.simulation is None and "simulation" in self.model_fields_set:
            _dict["simulation"] = None

        # set to None if created (nullable) is None
        # and model_fields_set contains the field
        if self.created is None and "created" in self.model_fields_set:
            _dict["created"] = None

        # set to None if created_time (nullable) is None
        # and model_fields_set contains the field
        if self.created_time is None and "created_time" in self.model_fields_set:
            _dict["created_time"] = None

        # set to None if expiry (nullable) is None
        # and model_fields_set contains the field
        if self.expiry is None and "expiry" in self.model_fields_set:
            _dict["expiry"] = None

        # set to None if time (nullable) is None
        # and model_fields_set contains the field
        if self.time is None and "time" in self.model_fields_set:
            _dict["time"] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TimedSavedStateUpdate from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "url": obj.get("url"),
                "name": obj.get("name"),
                "simulation": obj.get("simulation"),
                "created": obj.get("created"),
                "created_time": obj.get("created_time"),
                "tags": obj.get("tags"),
                "expiry": obj.get("expiry"),
                "time": obj.get("time"),
                "file": FileReadOnly.from_dict(obj["file"])
                if obj.get("file") is not None
                else None,
                "id": obj.get("id"),
                "uuid": obj.get("uuid"),
            }
        )
        return _obj
