# coding: utf-8

"""
3Di API

3Di simulation API (latest stable version: v3)   Framework release: 3.4.71   3Di core release: 3.6.10  deployed on:  09:22AM (UTC) on September 01, 2025

The version of the OpenAPI document: v3
Contact: info@nelen-schuurmans.nl
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List, Optional, Set, Union

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing_extensions import Annotated, Self


class DamagePostProcessing(BaseModel):
    """
    DamagePostProcessing
    """  # noqa: E501

    basic_post_processing: Optional[StrictInt] = None
    cost_type: StrictStr = Field(description="'min', 'avg', or 'max'")
    flood_month: StrictStr
    inundation_period: Union[
        Annotated[float, Field(strict=True, ge=1)],
        Annotated[int, Field(strict=True, ge=1)],
    ] = Field(description="time in hours")
    repair_time_infrastructure: Annotated[int, Field(le=240, strict=True, ge=1)] = (
        Field(description="time in hours")
    )
    repair_time_buildings: Annotated[int, Field(le=240, strict=True, ge=1)] = Field(
        description="time in hours"
    )
    __properties: ClassVar[List[str]] = [
        "basic_post_processing",
        "cost_type",
        "flood_month",
        "inundation_period",
        "repair_time_infrastructure",
        "repair_time_buildings",
    ]

    @field_validator("cost_type")
    def cost_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(["min", "avg", "max"]):
            raise ValueError("must be one of enum values ('min', 'avg', 'max')")
        return value

    @field_validator("flood_month")
    def flood_month_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(
            [
                "jan",
                "feb",
                "mar",
                "apr",
                "may",
                "jun",
                "jul",
                "aug",
                "sep",
                "oct",
                "nov",
                "dec",
            ]
        ):
            raise ValueError(
                "must be one of enum values ('jan', 'feb', 'mar', 'apr', 'may', 'jun', 'jul', 'aug', 'sep', 'oct', 'nov', 'dec')"
            )
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of DamagePostProcessing from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set(
            [
                "basic_post_processing",
            ]
        )

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of DamagePostProcessing from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "basic_post_processing": obj.get("basic_post_processing"),
                "cost_type": obj.get("cost_type"),
                "flood_month": obj.get("flood_month"),
                "inundation_period": obj.get("inundation_period"),
                "repair_time_infrastructure": obj.get("repair_time_infrastructure"),
                "repair_time_buildings": obj.get("repair_time_buildings"),
            }
        )
        return _obj
